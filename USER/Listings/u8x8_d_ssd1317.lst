C51 COMPILER V9.01   U8X8_D_SSD1317                                                        04/30/2021 10:55:28 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE U8X8_D_SSD1317
OBJECT MODULE PLACED IN .\Objects\u8x8_d_ssd1317.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\csrc\u8x8_d_ssd1317.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,SPEED) BR
                    -OWSE INCDIR(..\USER;..\SYS;..\BSP\BSP_485;..\BSP\BSP_ADC;..\BSP\BSP_KEY;..\BSP\BSP_OLED_IIC;..\APP) DEBUG OBJECTEXTEND P
                    -RINT(.\Listings\u8x8_d_ssd1317.lst) TABS(2) OBJECT(.\Objects\u8x8_d_ssd1317.obj)

line level    source

   1          /*
   2          
   3            u8x8_d_ssd1317.c
   4          
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2018, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33          
  34          
  35            SSD1317: 128x96 OLED
  36            
  37            https://github.com/olikraus/u8g2/issues/663
  38          
  39          */
  40          
  41          
  42          #include "u8x8.h"
*** ERROR C141 IN LINE 600 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 632 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 663 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
  43          
  44          
  45          
  46          /* more or less generic setup of all these small OLEDs */
  47          static const uint8_t u8x8_d_ssd1317_96x96_init_seq[] = {
  48              
  49            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  50            
C51 COMPILER V9.01   U8X8_D_SSD1317                                                        04/30/2021 10:55:28 PAGE 2   

  51            
  52            U8X8_C(0x0ae),            /* display off */
  53            U8X8_CA(0x0d5, 0x0d1),    /* clock divide ratio (0x00=1) and oscillator frequency (0x8) */
  54            U8X8_CA(0x0a8, 0x05f),    /* multiplex ratio */
  55            U8X8_CA(0x0d3, 0x000),    /* display offset */
  56            U8X8_CA(0x0a2, 0x000),    /* set display start line to 0 */
  57            U8X8_CA(0x08d, 0x014),    /* [2] charge pump setting (p62): 0x014 enable, 0x010 disable, SSD1306 only, sho
             -uld be removed for SH1106 */
  58            U8X8_CA(0x020, 0x000),    /* page addressing mode */
  59            
  60            U8X8_C(0x0a0),      /* segment remap a0/a1*/
  61            U8X8_C(0x0c8),      /* c0: scan dir normal, c8: reverse */
  62            
  63            // Flipmode
  64            //U8X8_C(0x0a1),      /* segment remap a0/a1*/
  65            //U8X8_C(0x0c0),      /* c0: scan dir normal, c8: reverse */
  66            
  67            U8X8_CA(0x0da, 0x012),    /* com pin HW config, sequential com pin config (bit 4), disable left/right rema
             -p (bit 5) */
  68          
  69            U8X8_CA(0x081, 0x09f),    /* [2] set contrast control */
  70            U8X8_CA(0x0d9, 0x0f1),    /* [2] pre-charge period 0x022/f1*/
  71            U8X8_CA(0x0db, 0x0ff),    /* vcomh deselect level */  
  72            
  73            // if vcomh is 0, then this will give the biggest range for contrast control issue #98
  74            // restored the old values for the noname constructor, because vcomh=0 will not work for all OLEDs, #116
  75            
  76            U8X8_C(0x02e),      /* Deactivate scroll */ 
  77            U8X8_C(0x0a4),      /* output ram to display */
  78            U8X8_C(0x0a6),      /* none inverted normal display mode */
  79              
  80            U8X8_END_TRANSFER(),              /* disable chip */
  81            U8X8_END()                /* end of sequence */
  82          };
  83          
  84          
  85          
  86          static const uint8_t u8x8_d_ssd1317_96x96_powersave0_seq[] = {
  87            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  88            U8X8_C(0x0af),                    /* display on */
  89            U8X8_END_TRANSFER(),              /* disable chip */
  90            U8X8_END()                  /* end of sequence */
  91          };
  92          
  93          static const uint8_t u8x8_d_ssd1317_96x96_powersave1_seq[] = {
  94            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  95            U8X8_C(0x0ae),                    /* display off */
  96            U8X8_END_TRANSFER(),              /* disable chip */
  97            U8X8_END()                  /* end of sequence */
  98          };
  99          
 100          static const uint8_t u8x8_d_ssd1317_96x96_flip0_seq[] = {
 101            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 102            U8X8_C(0x0a1),        /* segment remap a0/a1*/
 103            U8X8_C(0x0c8),        /* c0: scan dir normal, c8: reverse */
 104            U8X8_END_TRANSFER(),              /* disable chip */
 105            U8X8_END()                  /* end of sequence */
 106          };
 107          
 108          static const uint8_t u8x8_d_ssd1317_96x96_flip1_seq[] = {
 109            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 110            U8X8_C(0x0a0),        /* segment remap a0/a1*/
C51 COMPILER V9.01   U8X8_D_SSD1317                                                        04/30/2021 10:55:28 PAGE 3   

 111            U8X8_C(0x0c8),        /* c0: scan dir normal, c8: reverse */
 112            U8X8_END_TRANSFER(),              /* disable chip */
 113            U8X8_END()                  /* end of sequence */
 114          };
 115          
 116          
 117          static uint8_t u8x8_d_ssd1317_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 118          {
 119   1        uint8_t x, c;
 120   1        uint8_t *ptr;
 121   1        switch(msg)
 122   1        {
 123   2          /* handled by the calling function
 124   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 125   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1317_96x96_display_info);
 126   2            break;
 127   2          */
 128   2          /* handled by the calling function
 129   2          case U8X8_MSG_DISPLAY_INIT:
 130   2            u8x8_d_helper_display_init(u8x8);
 131   2            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1317_96x96_init_seq);    
 132   2            break;
 133   2          */
 134   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 135   2            if ( arg_int == 0 )
 136   2        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1317_96x96_powersave0_seq);
*** ERROR C208 IN LINE 136 OF ..\U8G2\CSRC\U8X8_D_SSD1317.C: '_u8x8_cad_SendSequence': too many actual parameters
 137   2            else
 138   2        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1317_96x96_powersave1_seq);
*** ERROR C208 IN LINE 138 OF ..\U8G2\CSRC\U8X8_D_SSD1317.C: '_u8x8_cad_SendSequence': too many actual parameters
 139   2            break;
 140   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 141   2            if ( arg_int == 0 )
 142   2            {
 143   3        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1317_96x96_flip0_seq);
*** ERROR C208 IN LINE 143 OF ..\U8G2\CSRC\U8X8_D_SSD1317.C: '_u8x8_cad_SendSequence': too many actual parameters
 144   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
 145   3            }
 146   2            else
 147   2            {
 148   3        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1317_96x96_flip1_seq);
*** ERROR C208 IN LINE 148 OF ..\U8G2\CSRC\U8X8_D_SSD1317.C: '_u8x8_cad_SendSequence': too many actual parameters
 149   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 150   3            }
 151   2            break;
 152   2      #ifdef U8X8_WITH_SET_CONTRAST
 153   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 154   2            u8x8_cad_StartTransfer(u8x8);
 155   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 156   2            u8x8_cad_SendArg(u8x8, arg_int ); /* ssd1306 has range from 0 to 255 */
 157   2            u8x8_cad_EndTransfer(u8x8);
 158   2            break;
 159   2      #endif
 160   2        case U8X8_MSG_DISPLAY_DRAW_TILE:
 161   2         u8x8_cad_StartTransfer(u8x8);
 162   2         x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 163   2         x *= 8;
 164   2         x += u8x8->x_offset;
 165   2        
 166   2         u8x8_cad_SendCmd(u8x8, 0x040 );  /* set line offset to 0 */
 167   2         
 168   2         u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
C51 COMPILER V9.01   U8X8_D_SSD1317                                                        04/30/2021 10:55:28 PAGE 4   

 169   2         u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));  /* probably wrong, should be SendCmd */
 170   2         u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)); /* probably wrong, should be SendCmd
             - */
 171   2      
 172   2          
 173   2         do
 174   2         {
 175   3          c = ((u8x8_tile_t *)arg_ptr)->cnt;
 176   3          ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 177   3          u8x8_cad_SendData(u8x8, c*8, ptr);  /* note: SendData can not handle more than 255 bytes */
*** ERROR C208 IN LINE 177 OF ..\U8G2\CSRC\U8X8_D_SSD1317.C: '_u8x8_cad_SendData': too many actual parameters
 178   3          /*
 179   3        do
 180   3        {
 181   3          u8x8_cad_SendData(u8x8, 8, ptr);
 182   3          ptr += 8;
 183   3          c--;
 184   3        } while( c > 0 );
 185   3        */
 186   3        arg_int--;
 187   3            } while( arg_int > 0 );
 188   2            
 189   2            u8x8_cad_EndTransfer(u8x8);
 190   2            break;
 191   2          default:
 192   2            return 0;
 193   2        }
 194   1        return 1;
 195   1      }
 196          
 197          
 198          static const u8x8_display_info_t u8x8_ssd1317_96x96_display_info =
 199          {
 200            /* chip_enable_level = */ 0,
 201            /* chip_disable_level = */ 1,
 202            
 203            /* post_chip_enable_wait_ns = */ 20,
 204            /* pre_chip_disable_wait_ns = */ 10,
 205            /* reset_pulse_width_ms = */ 100,   /* SSD1306: 3 us */
 206            /* post_reset_wait_ms = */ 100, /* far east OLEDs need much longer setup time */
 207            /* sda_setup_time_ns = */ 50,   /* SSD1306: 15ns, but cycle time is 100ns, so use 100/2 */
 208            /* sck_pulse_width_ns = */ 50,  /* SSD1306: 20ns, but cycle time is 100ns, so use 100/2, AVR: below 70: 8
             - MHz, >= 70 --> 4MHz clock */
 209            /* sck_clock_hz = */ 8000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 210            /* spi_mode = */ 0,   /* active high, rising edge */
 211            /* i2c_bus_clock_100kHz = */ 4,
 212            /* data_setup_time_ns = */ 40,
 213            /* write_pulse_width_ns = */ 150, /* SSD1306: cycle time is 300ns, so use 300/2 = 150 */
 214            /* tile_width = */ 12,
 215            /* tile_hight = */ 12,
 216            /* default_x_offset = */ 16,
 217            /* flipmode_x_offset = */ 16,
 218            /* pixel_width = */ 96,
 219            /* pixel_height = */ 96
 220          };
 221          
 222          uint8_t u8x8_d_ssd1317_96x96(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 223          {
 224   1          
 225   1        if ( u8x8_d_ssd1317_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 226   1          return 1;
C51 COMPILER V9.01   U8X8_D_SSD1317                                                        04/30/2021 10:55:28 PAGE 5   

 227   1        
 228   1        switch(msg)
 229   1        {
 230   2          case U8X8_MSG_DISPLAY_INIT:
 231   2            u8x8_d_helper_display_init(u8x8);
 232   2            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1317_96x96_init_seq);    
*** ERROR C208 IN LINE 232 OF ..\U8G2\CSRC\U8X8_D_SSD1317.C: '_u8x8_cad_SendSequence': too many actual parameters
 233   2            break;
 234   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 235   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1317_96x96_display_info);
 236   2            break;
 237   2          default:
 238   2            return 0;
 239   2        }
 240   1        return 1;
 241   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  9 ERROR(S)
