C51 COMPILER V9.01   DEBUG                                                                 05/11/2021 15:11:42 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DEBUG
OBJECT MODULE PLACED IN .\Objects\Debug.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\SYS\Debug.C LARGE WARNINGLEVEL(1) OPTIMIZE(8,SPEED) BROWSE INCDIR(..\
                    -USER;..\SYS;..\BSP\BSP_485;..\BSP\BSP_ADC;..\BSP\BSP_KEY;..\BSP\BSP_OLED_IIC;..\APP;..\BSP\BSP_IO) DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\Debug.lst) TABS(2) OBJECT(.\Objects\Debug.obj)

line level    source

   1          /********************************** (C) COPYRIGHT *******************************
   2          * File Name          : Debug.C
   3          * Author             : WCH
   4          * Version            : V1.2
   5          * Date               : 2018/02/26
   6          * Description        : CH554 DEBUG Interface
   7                               CH554ï¿½ï¿½Æµï¿½Þ¸Ä¡ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
   8                               ï¿½ï¿½ï¿½ï¿½0ï¿½Í´ï¿½ï¿½ï¿½1ï¿½ï¿½Ê¼ï¿½ï¿½
   9                               ï¿½ï¿½ï¿½ï¿½0ï¿½Í´ï¿½ï¿½ï¿½1ï¿½ï¿½ï¿½Õ·ï¿½ï¿½Óºï¿½ï¿½ï¿½
  10                               ï¿½ï¿½ï¿½Å¹ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½                    
  11          *******************************************************************************/
  12          
  13          #include "CH551.H"
  14          #include "Debug.H"
  15          
  16          /*******************************************************************************
  17          * Function Name  : CfgFsys( )
  18          * Description    : CH554Ê±ï¿½ï¿½Ñ¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ãºï¿½ï¿½ï¿½,Ä¬ï¿½ï¿½Ê¹ï¿½ï¿½Fsys 6MHzï¿½ï¿½FREQ_SYSï¿½
             -ï¿½ï¿½ï¿½Í¨ï¿½ï¿½
  19                             CLOCK_CFGï¿½ï¿½ï¿½ÃµÃµï¿½ï¿½ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½Â£ï¿½
  20                             Fsys = (Fosc * 4/(CLOCK_CFG & MASK_SYS_CK_SEL);ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½Òªï¿½Ô¼ï¿½ï¿½ï
             -¿½ï¿½ï¿½ 
  21          * Input          : None
  22          * Output         : None
  23          * Return         : None
  24          *******************************************************************************/ 
  25          void  CfgFsys( )  
  26          {
  27   1      #if OSC_EN_XT 
                  SAFE_MOD = 0x55;
                  SAFE_MOD = 0xAA;
                  CLOCK_CFG |= bOSC_EN_XT;                          //Ê¹ï¿½ï¿½ï¿½â²¿ï¿½ï¿½ï¿½ï¿½
                  CLOCK_CFG &= ~bOSC_EN_INT;                        //ï¿½Ø±ï¿½ï¿½Ú²ï¿½ï¿½ï¿½ï¿½ï¿½ 
              #endif  
  33   1          SAFE_MOD = 0x55;
  34   1          SAFE_MOD = 0xAA;
  35   1      #if FREQ_SYS == 24000000  
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x06;  // 24MHz 
              #endif  
  38   1      #if FREQ_SYS == 16000000    
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x05;  // 16MHz 
              #endif
  41   1      #if FREQ_SYS == 12000000    
  42   1          CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x04;  // 12MHz
  43   1      #endif  
  44   1      #if FREQ_SYS == 6000000   
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x03;  // 6MHz  
              #endif  
  47   1      #if FREQ_SYS == 3000000 
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x02;  // 3MHz  
              #endif
  50   1      #if FREQ_SYS == 750000  
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x01;  // 750KHz
C51 COMPILER V9.01   DEBUG                                                                 05/11/2021 15:11:42 PAGE 2   

              #endif
  53   1      #if FREQ_SYS == 187500  
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x00;  // 187.5KHz  
              #endif
  56   1          SAFE_MOD = 0x00;
  57   1      }
  58          
  59          /*******************************************************************************
  60          * Function Name  : mDelayus(UNIT16 n)
  61          * Description    : usï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½
  62          * Input          : UNIT16 n
  63          * Output         : None
  64          * Return         : None
  65          *******************************************************************************/ 
  66          void  mDelayuS( UINT16 n )  // ï¿½ï¿½uSÎªï¿½ï¿½Î»ï¿½ï¿½Ê±
  67          {
  68   1      #ifdef  FREQ_SYS
  69   1      #if   FREQ_SYS <= 6000000
                  n >>= 2;
              #endif
  72   1      #if   FREQ_SYS <= 3000000
                  n >>= 2;
              #endif
  75   1      #if   FREQ_SYS <= 750000
                  n >>= 4;
              #endif
  78   1      #endif
  79   1        while ( n ) {  // total = 12~13 Fsys cycles, 1uS @Fsys=12MHz
  80   2          ++ SAFE_MOD;  // 2 Fsys cycles, for higher Fsys, add operation here
  81   2      #ifdef  FREQ_SYS
  82   2      #if   FREQ_SYS >= 14000000
                  ++ SAFE_MOD;
              #endif
  85   2      #if   FREQ_SYS >= 16000000
                  ++ SAFE_MOD;
              #endif
  88   2      #if   FREQ_SYS >= 18000000
                  ++ SAFE_MOD;
              #endif
  91   2      #if   FREQ_SYS >= 20000000
                  ++ SAFE_MOD;
              #endif
  94   2      #if   FREQ_SYS >= 22000000
                  ++ SAFE_MOD;
              #endif
  97   2      #if   FREQ_SYS >= 24000000
                  ++ SAFE_MOD;
              #endif
 100   2      #endif
 101   2          -- n;
 102   2        }
 103   1      }
 104          
 105          /*******************************************************************************
 106          * Function Name  : mDelayms(UNIT16 n)
 107          * Description    : msï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½
 108          * Input          : UNIT16 n
 109          * Output         : None
 110          * Return         : None
 111          *******************************************************************************/
 112          #define DELAY_MS_HW
 113          void  mDelaymS( UINT16 n )
C51 COMPILER V9.01   DEBUG                                                                 05/11/2021 15:11:42 PAGE 3   

 114          {
 115   1        while ( n ) {
 116   2      #ifdef  DELAY_MS_HW
 117   2          while ( ( TKEY_CTRL & bTKC_IF ) == 0 );
 118   2          while ( TKEY_CTRL & bTKC_IF );
 119   2      #else
                  mDelayuS( 1000 );
              #endif
 122   2          -- n;
 123   2        }
 124   1      }                                         
 125          
 126          /*******************************************************************************
 127          * Function Name  : CH554WDTModeSelect(UINT8 mode)
 128          * Description    : CH554ï¿½ï¿½ï¿½Å¹ï¿½Ä£Ê½Ñ¡ï¿½ï¿½
 129          * Input          : UINT8 mode 
 130                             0  timer
 131                             1  watchDog
 132          * Output         : None
 133          * Return         : None
 134          *******************************************************************************/
 135          void WDTModeSelect(UINT8 mode)
 136          {
 137   1         SAFE_MOD = 0x55;
 138   1         SAFE_MOD = 0xaa;                                                             //ï¿½ï¿½ï¿½ë°²È«Ä£Ê½
 139   1         if(mode){
 140   2           GLOBAL_CFG |= bWDOG_EN;                                                    //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Å¹ï
             -¿½ï¿½ï¿½Î»
 141   2         }
 142   1         else GLOBAL_CFG &= ~bWDOG_EN;                                              //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Å¹ï¿½ï
             -¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îªï¿½ï¿½Ê±ï¿½ï¿½
 143   1         SAFE_MOD = 0x00;                                                             //ï¿½Ë³ï¿½ï¿½ï¿½È«Ä£Ê½
 144   1         WDOG_COUNT = 0;                                                              //ï¿½ï¿½ï¿½Å¹ï¿½ï¿½ï¿½ï¿½ï
             -¿½Öµ
 145   1      }
 146          
 147          /*******************************************************************************
 148          * Function Name  : CH554WDTFeed(UINT8 tim)
 149          * Description    : CH554ï¿½ï¿½ï¿½Å¹ï¿½ï¿½ï¿½Ê±Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 150          * Input          : UINT8 tim ï¿½ï¿½ï¿½Å¹ï¿½ï¿½ï¿½Î»Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 151                             00H(6MHz)=2.8s
 152                             80H(6MHz)=1.4s
 153          * Output         : None
 154          * Return         : None
 155          *******************************************************************************/
 156          void WDTFeed(UINT8 tim)
 157          {
 158   1         WDOG_COUNT = tim;                                                             //ï¿½ï¿½ï¿½Å¹ï¿½ï¿½ï¿½ï¿½
             -ï¿½ï¿½ï¿½ï¿½ï¿½Öµ 
 159   1      }
 160          
 161          
 162          /*******************************************************************************
 163          * Function Name  : Port1Cfg()
 164          * Description    : ï¿½Ë¿ï¿½1ï¿½ï¿½ï¿½ï¿½
 165          * Input          : Mode  0 = ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë£¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 166                                   1 = ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 167                                   2 = ï¿½ï¿½Â©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 168                                   3 = ï¿½ï¿½51Ä£Ê½ï¿½ï¿½ï¿½ï¿½Â©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
             -ï¿½Ú²ï¿½ï¿½ï¿½Â·ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½ÉµÍµï¿½ï¿½ßµÄµï¿½Æ½ï¿½ï¿½ï¿½ï¿½    
 169                             ,UINT8 Pin (0-7)                      
 170          * Output         : None
C51 COMPILER V9.01   DEBUG                                                                 05/11/2021 15:11:42 PAGE 4   

 171          * Return         : None
 172          *******************************************************************************/
 173          void Port1Cfg(UINT8 Mode,UINT8 Pin)
 174          {
 175   1        switch(Mode){
 176   2          case 0:
 177   2            P1_MOD_OC = P1_MOD_OC & ~(1<<Pin);
 178   2            P1_DIR_PU = P1_DIR_PU & ~(1<<Pin);  
 179   2            break;
 180   2          case 1:
 181   2            P1_MOD_OC = P1_MOD_OC & ~(1<<Pin);
 182   2            P1_DIR_PU = P1_DIR_PU | (1<<Pin);       
 183   2            break;    
 184   2          case 2:
 185   2            P1_MOD_OC = P1_MOD_OC | (1<<Pin);
 186   2            P1_DIR_PU = P1_DIR_PU & ~(1<<Pin);        
 187   2            break;    
 188   2          case 3:
 189   2            P1_MOD_OC = P1_MOD_OC | (1<<Pin);
 190   2            P1_DIR_PU = P1_DIR_PU | (1<<Pin);     
 191   2            break;
 192   2          default:
 193   2            break;      
 194   2        }
 195   1      }
 196          /*******************************************************************************
 197          * Function Name  : Port3Cfg()
 198          * Description    : ï¿½Ë¿ï¿½3ï¿½ï¿½ï¿½ï¿½
 199          * Input          : Mode  0 = ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë£¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 200                                   1 = ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 201                                   2 = ï¿½ï¿½Â©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 202                                   3 = ï¿½ï¿½51Ä£Ê½ï¿½ï¿½ï¿½ï¿½Â©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
             -ï¿½Ú²ï¿½ï¿½ï¿½Â·ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½ÉµÍµï¿½ï¿½ßµÄµï¿½Æ½ï¿½ï¿½ï¿½ï¿½    
 203                             ,UINT8 Pin (0-7)                      
 204          * Output         : None
 205          * Return         : None
 206          *******************************************************************************/
 207          void Port3Cfg(UINT8 Mode,UINT8 Pin)
 208          {
 209   1        switch(Mode){
 210   2          case 0:
 211   2            P3_MOD_OC = P3_MOD_OC & ~(1<<Pin);
 212   2            P3_DIR_PU = P3_DIR_PU & ~(1<<Pin);  
 213   2            break;
 214   2          case 1:
 215   2            P3_MOD_OC = P3_MOD_OC & ~(1<<Pin);
 216   2            P3_DIR_PU = P3_DIR_PU | (1<<Pin);       
 217   2            break;    
 218   2          case 2:
 219   2            P3_MOD_OC = P3_MOD_OC | (1<<Pin);
 220   2            P3_DIR_PU = P3_DIR_PU & ~(1<<Pin);        
 221   2            break;    
 222   2          case 3:
 223   2            P3_MOD_OC = P3_MOD_OC | (1<<Pin);
 224   2            P3_DIR_PU = P3_DIR_PU | (1<<Pin);     
 225   2            break;
 226   2          default:
 227   2            break;      
 228   2        }
 229   1      }
 230          /*******************************************************************************
 231          * Function Name  : mInitSTDIO()
C51 COMPILER V9.01   DEBUG                                                                 05/11/2021 15:11:42 PAGE 5   

 232          * Description    : CH554ä¸²å£0åå§å,é»è®¤ä½¿ç¨T1ä½UART0çæ³¢ç¹çåçå¨,ä¹å¯ä»¥ä½¿ç¨T2
 233                             ä½ä¸ºæ³¢ç¹çåçå¨
 234          * Input          : None
 235          * Output         : None
 236          * Return         : None
 237          *******************************************************************************/
 238          void  mInitSTDIO( )
 239          {
 240   1          UINT32 x;
 241   1          UINT8 x2; 
 242   1      
 243   1          SM0 = 0;
 244   1          SM1 = 1;
 245   1          SM2 = 0;                                                                   //ä¸²å£0ä½¿ç¨æ¨¡å¼1
 246   1                                                                                     //ä½¿ç¨Timer1ä½ä¸ºæ³¢ç¹ç
             -åçå¨
 247   1          RCLK = 0;                                                                  //UART0æ¥æ¶æ¶é
 248   1          TCLK = 0;                                                                  //UART0åéæ¶é
 249   1          PCON |= SMOD;
 250   1          x = 10 * FREQ_SYS / UART0_BUAD / 16;                                       //å¦ææ´æ¹ä¸»é¢ï¼æ³¨æ
             -xçå¼ä¸è¦æº¢åº                            
 251   1          x2 = x % 10;
 252   1          x /= 10;
 253   1          if ( x2 >= 5 ) x ++;                                                       //åèäºå¥
 254   1      
 255   1          TMOD = TMOD & ~ bT1_GATE & ~ bT1_CT & ~ MASK_T1_MOD | bT1_M1;              //0X20ï¼Timer1ä½ä¸º8ä½è
             -ªå¨éè½½å®æ¶å¨
 256   1          T2MOD = T2MOD | bTMR_CLK | bT1_CLK;                                        //Timer1æ¶ééæ©
 257   1          TH1 = 0-x;                                                                 //12MHzæ¶æ¯,buad/12ä¸ºå®
             -ééè®¾ç½®æ³¢ç¹ç
 258   1          TR1 = 1;                                                                   //å¯å¨å®æ¶å¨1
 259   1          TI = 1;
 260   1          REN = 1;   
 261   1          TI = 1;
 262   1          ES = 1;   
 263   1                                                              //ä¸²å£0æ¥æ¶ä½¿è½
 264   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    403    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
