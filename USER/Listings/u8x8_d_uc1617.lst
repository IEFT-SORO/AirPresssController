C51 COMPILER V9.01   U8X8_D_UC1617                                                         04/30/2021 10:55:33 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE U8X8_D_UC1617
OBJECT MODULE PLACED IN .\Objects\u8x8_d_uc1617.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\csrc\u8x8_d_uc1617.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,SPEED) BRO
                    -WSE INCDIR(..\USER;..\SYS;..\BSP\BSP_485;..\BSP\BSP_ADC;..\BSP\BSP_KEY;..\BSP\BSP_OLED_IIC;..\APP) DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\u8x8_d_uc1617.lst) TABS(2) OBJECT(.\Objects\u8x8_d_uc1617.obj)

line level    source

   1          /*
   2          
   3            u8x8_d_uc1617.c
   4            
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2017, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33          
  34          
  35          */
  36          #include "u8x8.h"
*** ERROR C141 IN LINE 600 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 632 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 663 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
  37          
  38          
  39          
  40          
  41          
  42          static const uint8_t u8x8_d_uc1617_powersave0_seq[] = {
  43            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  44            U8X8_C(0x0ad),                    /* display on */
  45            U8X8_END_TRANSFER(),              /* disable chip */
  46            U8X8_END()                  /* end of sequence */
  47          };
  48          
  49          static const uint8_t u8x8_d_uc1617_powersave1_seq[] = {
  50            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
C51 COMPILER V9.01   U8X8_D_UC1617                                                         04/30/2021 10:55:33 PAGE 2   

  51            U8X8_C(0x0ac),                    /* display off, enter sleep mode */
  52            U8X8_END_TRANSFER(),              /* disable chip */
  53            U8X8_END()                  /* end of sequence */
  54          };
  55          
  56          static const uint8_t u8x8_d_uc1617_flip0_seq[] = {
  57            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  58            U8X8_C(0x0c4),              /* LCD Mapping */
  59            U8X8_END_TRANSFER(),              /* disable chip */
  60            U8X8_END()                  /* end of sequence */
  61          };
  62          
  63          static const uint8_t u8x8_d_uc1617_flip1_seq[] = {
  64            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  65            U8X8_C(0x0c2),              /* LCD Mapping */
  66            U8X8_END_TRANSFER(),              /* disable chip */
  67            U8X8_END()                  /* end of sequence */
  68          };
  69          
  70          
  71          uint8_t u8x8_d_uc1617_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  72          {
  73   1        uint8_t x, y, c;
  74   1        uint8_t *ptr;
  75   1        switch(msg)
  76   1        {
  77   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
  78   2            u8x8_cad_StartTransfer(u8x8);
  79   2          
  80   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;
  81   2            x *= 8;
  82   2            x += u8x8->x_offset;
  83   2         
  84   2            u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
  85   2            u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
  86   2          
  87   2            y = ((u8x8_tile_t *)arg_ptr)->y_pos;
  88   2            u8x8_cad_SendCmd(u8x8, 0x060 | (y&15));
  89   2            u8x8_cad_SendCmd(u8x8, 0x070 | (y>>4));
  90   2          
  91   2            c = ((u8x8_tile_t *)arg_ptr)->cnt;
  92   2            c *= 8;
  93   2            ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
  94   2            do
  95   2            {
  96   3        u8x8_cad_SendData(u8x8, c, ptr);  /* note: SendData can not handle more than 255 bytes */
*** ERROR C208 IN LINE 96 OF ..\U8G2\CSRC\U8X8_D_UC1617.C: '_u8x8_cad_SendData': too many actual parameters
  97   3        arg_int--;
  98   3            } while( arg_int > 0 );
  99   2            
 100   2            u8x8_cad_EndTransfer(u8x8);
 101   2            break;
 102   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 103   2            if ( arg_int == 0 )
 104   2        u8x8_cad_SendSequence(u8x8, u8x8_d_uc1617_powersave0_seq);
*** ERROR C208 IN LINE 104 OF ..\U8G2\CSRC\U8X8_D_UC1617.C: '_u8x8_cad_SendSequence': too many actual parameters
 105   2            else
 106   2        u8x8_cad_SendSequence(u8x8, u8x8_d_uc1617_powersave1_seq);
*** ERROR C208 IN LINE 106 OF ..\U8G2\CSRC\U8X8_D_UC1617.C: '_u8x8_cad_SendSequence': too many actual parameters
 107   2            break;
 108   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 109   2            if ( arg_int == 0 )
C51 COMPILER V9.01   U8X8_D_UC1617                                                         04/30/2021 10:55:33 PAGE 3   

 110   2            {
 111   3        u8x8_cad_SendSequence(u8x8, u8x8_d_uc1617_flip0_seq);
*** ERROR C208 IN LINE 111 OF ..\U8G2\CSRC\U8X8_D_UC1617.C: '_u8x8_cad_SendSequence': too many actual parameters
 112   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
 113   3            }
 114   2            else
 115   2            {
 116   3        u8x8_cad_SendSequence(u8x8, u8x8_d_uc1617_flip1_seq);
*** ERROR C208 IN LINE 116 OF ..\U8G2\CSRC\U8X8_D_UC1617.C: '_u8x8_cad_SendSequence': too many actual parameters
 117   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 118   3            } 
 119   2            break;
 120   2      #ifdef U8X8_WITH_SET_CONTRAST
 121   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 122   2            u8x8_cad_StartTransfer(u8x8);
 123   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 124   2            u8x8_cad_SendArg(u8x8, arg_int  );  /* uc1617 has range from 0 to 255 */
 125   2            u8x8_cad_EndTransfer(u8x8);
 126   2            break;
 127   2      #endif
 128   2          default:
 129   2            return 0;
 130   2        }
 131   1        return 1;
 132   1      }
 133          
 134          /*================================================*/
 135          /* JLX128128 */
 136          
 137          static const uint8_t u8x8_d_uc1617_jlx128128_init_seq[] = {
 138              
 139            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 140            
 141            U8X8_C(0x0e2),                  /* reset */
 142            U8X8_DLY(10),
 143            
 144            //U8X8_D1(0x0ff),
 145            U8X8_C(0x027),                  /* temperature compensation */
 146            U8X8_C(0x02b),                  /* panel loading: 13-18nF */
 147            
 148            U8X8_C(0x02f),                  /* internal pump control */
 149            U8X8_C(0x0eb),                  /* bias=1/11 */
 150            U8X8_CA(0x081, 0x066),    /* set contrast */
 151            //U8X8_C(0x0a9),                  /* used in display datasheet, but cmd not described in controller datashe
             -et */
 152            
 153            U8X8_CA(0x0f1, 0x07f),      /* set COM end */
 154            U8X8_CA(0x0f2, 0x000),    /* display line start */
 155            U8X8_CA(0x0f3, 127),      /* display line end */
 156            U8X8_C(0x0a3),                  /* line rate */
 157            
 158            U8X8_C(0x0d3),                  /* */
 159            U8X8_C(0x0d7),                  /* */
 160            
 161            U8X8_C(0x0ad),                  /* display enable BW Mode*/
 162            //U8X8_C(0x0af),                  /* display enable GS Mode*/
 163          
 164            //U8X8_C(0x0a5),                  /* all pixel on */
 165          
 166            //U8X8_C(0x0d1),                  /* display pattern */  
 167            U8X8_C(0x089),                  /* auto increment */
 168            U8X8_C(0x0c4),              /* LCD Mapping */
C51 COMPILER V9.01   U8X8_D_UC1617                                                         04/30/2021 10:55:33 PAGE 4   

 169            U8X8_C(0x000),                    /* column  */
 170            U8X8_C(0x060),                    /* page adr low */
 171            U8X8_C(0x070),                    /* page adr high */
 172          
 173            U8X8_D1(0x0ff),
 174            U8X8_D1(0x0ff),
 175            U8X8_D1(0x0ff),
 176            U8X8_D1(0x0ff),
 177            U8X8_D1(0x0ff),
 178            U8X8_D1(0x0ff),
 179            U8X8_D1(0x0ff),
 180            U8X8_D1(0x0ff),
 181          
 182            U8X8_D1(0x0ff),
 183            U8X8_D1(0x0ff),
 184            U8X8_D1(0x0ff),
 185            U8X8_D1(0x0ff),
 186            U8X8_D1(0x0ff),
 187            U8X8_D1(0x0ff),
 188            U8X8_D1(0x0ff),
 189            U8X8_D1(0x0ff),
 190            
 191            U8X8_END_TRANSFER(),              /* disable chip */
 192            U8X8_END()                  /* end of sequence */
 193          };
 194          
 195          static const u8x8_display_info_t u8x8_uc1617_128x128_display_info =
 196          {
 197            /* chip_enable_level = */ 0,
 198            /* chip_disable_level = */ 1,
 199            
 200            /* post_chip_enable_wait_ns = */ 10,  /* uc1617 datasheet, page 54, actually 5 */
 201            /* pre_chip_disable_wait_ns = */ 10,  /* uc1617 datasheet, page 54, actually 5 */
 202            /* reset_pulse_width_ms = */ 10, 
 203            /* post_reset_wait_ms = */ 20,  /* uc1617 datasheet, page 56 */
 204            /* sda_setup_time_ns = */ 24,   /* uc1617 datasheet, page 54 */
 205            /* sck_pulse_width_ns = */ 45,  /* half of cycle time  uc1617 datasheet, page 54*/
 206            /* sck_clock_hz = */ 8000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 207            /* spi_mode = */ 0,   /* active high, rising edge */
 208            /* i2c_bus_clock_100kHz = */ 4,
 209            /* data_setup_time_ns = */ 30,  /* uc1617 datasheet, page 52 */
 210            /* write_pulse_width_ns = */ 65,  /* uc1617 datasheet, page 52 */
 211            /* tile_width = */ 16,    /* width of 16*8=128 pixel */
 212            /* tile_hight = */ 16,
 213            /* default_x_offset = */ 0,
 214            /* flipmode_x_offset = */ 0,
 215            /* pixel_width = */ 128,
 216            /* pixel_height = */ 128
 217          };
 218          
 219          uint8_t u8x8_d_uc1617_jlx128128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 220          {
 221   1        /* call common procedure first and handle messages there */
 222   1        if ( u8x8_d_uc1617_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 223   1        {
 224   2          /* msg not handled, then try here */
 225   2          switch(msg)
 226   2          {
 227   3            case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 228   3        u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1617_128x128_display_info);
 229   3        break;
C51 COMPILER V9.01   U8X8_D_UC1617                                                         04/30/2021 10:55:33 PAGE 5   

 230   3            case U8X8_MSG_DISPLAY_INIT:
 231   3        u8x8_d_helper_display_init(u8x8);
 232   3        u8x8_cad_SendSequence(u8x8, u8x8_d_uc1617_jlx128128_init_seq);
*** ERROR C208 IN LINE 232 OF ..\U8G2\CSRC\U8X8_D_UC1617.C: '_u8x8_cad_SendSequence': too many actual parameters
 233   3        for(;;)
 234   3          ;
 235   3        break;
 236   3            default:
 237   3        return 0;   /* msg unknown */
 238   3          }
 239   2        }
 240   1        return 1;
 241   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  9 ERROR(S)
