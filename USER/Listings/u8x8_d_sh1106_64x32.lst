C51 COMPILER V9.01   U8X8_D_SH1106_64X32                                                   04/30/2021 10:55:25 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE U8X8_D_SH1106_64X32
OBJECT MODULE PLACED IN .\Objects\u8x8_d_sh1106_64x32.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\csrc\u8x8_d_sh1106_64x32.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,SPEE
                    -D) BROWSE INCDIR(..\USER;..\SYS;..\BSP\BSP_485;..\BSP\BSP_ADC;..\BSP\BSP_KEY;..\BSP\BSP_OLED_IIC;..\APP) DEBUG OBJECTEXT
                    -END PRINT(.\Listings\u8x8_d_sh1106_64x32.lst) TABS(2) OBJECT(.\Objects\u8x8_d_sh1106_64x32.obj)

line level    source

   1          /*
   2          
   3            u8x8_d_sh1106_64x32.c
   4          
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2018, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33            
  34          */
  35          
  36          
  37          #include "u8x8.h"
*** ERROR C141 IN LINE 600 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 632 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 663 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
  38          
  39          
  40          
  41          /* issue 568 */
  42          static const uint8_t u8x8_d_sh1106_64x32_init_seq[] = {
  43              
  44            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  45            
  46            
  47            U8X8_C(0x0ae),                    /* display off */
  48            U8X8_CA(0x0d5, 0x080),    /* clock divide ratio (0x00=1) and oscillator frequency (0x8) */
  49            U8X8_CA(0x0a8, 0x01f),    /* multiplex ratio, 0.42 OLED */
  50            U8X8_CA(0x0d3, 0x000),    /* display offset, 0.42 OLED  */
C51 COMPILER V9.01   U8X8_D_SH1106_64X32                                                   04/30/2021 10:55:25 PAGE 2   

  51            U8X8_C(0x040),                    /* set display start line to 0, 0.42 OLED */
  52            U8X8_CA(0xad, 0x8b),          /* DC-DC ON/OFF Mode Set: Built-in DC-DC is used, Normal Display (POR = 0x8
             -b) */
  53            U8X8_C(0x33),       /* set charge pump voltage 0x30 (POR) .. 0x33 */
  54            U8X8_CA(0x020, 0x000),    /* page addressing mode */
  55            
  56            U8X8_C(0x0a1),        /* segment remap a0/a1, 0.66 OLED  */
  57            U8X8_C(0x0c8),        /* c0: scan dir normal, c8: reverse, 0.66 OLED  */
  58            // Flipmode
  59            // U8X8_C(0x0a0),       /* segment remap a0/a1*/
  60            // U8X8_C(0x0c0),       /* c0: scan dir normal, c8: reverse */
  61            
  62            U8X8_CA(0x0da, 0x012),    /* com pin HW config, sequential com pin config (bit 4), disable left/right rema
             -p (bit 5), 0.66 OLED */
  63            U8X8_CA(0x081, 0x080),    /* [2] set contrast control, 0.42 OLED datasheet: 0xcf */
  64            U8X8_CA(0x0d9, 0x022),    /* [2] pre-charge period 0x022/f1, 0.42 OLED datasheet: 0x22 */
  65            U8X8_CA(0x0db, 0x028),    /* vcomh deselect level, 0.42 OLED datasheet: 0x00 */
  66            
  67            U8X8_C(0x02e),        /* Deactivate scroll */ 
  68            U8X8_C(0x0a4),        /* output ram to display */
  69            U8X8_C(0x0a6),        /* none inverted normal display mode */
  70              
  71            U8X8_END_TRANSFER(),              /* disable chip */
  72            U8X8_END()                  /* end of sequence */
  73          };
  74          
  75          static const uint8_t u8x8_d_sh1106_64x32_powersave0_seq[] = {
  76            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  77            U8X8_C(0x0af),                    /* display on */
  78            U8X8_END_TRANSFER(),              /* disable chip */
  79            U8X8_END()                  /* end of sequence */
  80          };
  81          
  82          static const uint8_t u8x8_d_sh1106_64x32_powersave1_seq[] = {
  83            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  84            U8X8_C(0x0ae),                    /* display off */
  85            U8X8_END_TRANSFER(),              /* disable chip */
  86            U8X8_END()                  /* end of sequence */
  87          };
  88          
  89          static const uint8_t u8x8_d_sh1106_64x32_flip0_seq[] = {
  90            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  91            U8X8_C(0x0a1),        /* segment remap a0/a1*/
  92            U8X8_C(0x0c8),        /* c0: scan dir normal, c8: reverse */
  93            U8X8_CA(0x0d3, 0),      /* display offset, 0.42 OLED  */
  94            U8X8_END_TRANSFER(),              /* disable chip */
  95            U8X8_END()                  /* end of sequence */
  96          };
  97          
  98          static const uint8_t u8x8_d_sh1106_64x32_flip1_seq[] = {
  99            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 100            U8X8_C(0x0a0),        /* segment remap a0/a1*/
 101            U8X8_C(0x0c0),        /* c0: scan dir normal, c8: reverse */
 102            U8X8_CA(0x0d3, 0),    /* What is the correct offset in flip 1 mode?  --> Issue 547 */
 103            U8X8_END_TRANSFER(),              /* disable chip */
 104            U8X8_END()                  /* end of sequence */
 105          };
 106          
 107          
 108          static uint8_t u8x8_d_sh1106_64x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 109          {
 110   1        uint8_t x, c;
C51 COMPILER V9.01   U8X8_D_SH1106_64X32                                                   04/30/2021 10:55:25 PAGE 3   

 111   1        uint8_t *ptr;
 112   1        switch(msg)
 113   1        {
 114   2          /* handled by the calling function
 115   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 116   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_64x32_display_info);
 117   2            break;
 118   2          case U8X8_MSG_DISPLAY_INIT:
 119   2            u8x8_d_helper_display_init(u8x8);
 120   2            u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_init_seq);    
 121   2            break;
 122   2          */
 123   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 124   2            if ( arg_int == 0 )
 125   2              u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_powersave0_seq);
*** ERROR C208 IN LINE 125 OF ..\U8G2\CSRC\U8X8_D_SH1106_64X32.C: '_u8x8_cad_SendSequence': too many actual parameters
 126   2            else
 127   2              u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_powersave1_seq);
*** ERROR C208 IN LINE 127 OF ..\U8G2\CSRC\U8X8_D_SH1106_64X32.C: '_u8x8_cad_SendSequence': too many actual parameters
 128   2            break;
 129   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 130   2            if ( arg_int == 0 )
 131   2            {
 132   3              u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_flip0_seq);
*** ERROR C208 IN LINE 132 OF ..\U8G2\CSRC\U8X8_D_SH1106_64X32.C: '_u8x8_cad_SendSequence': too many actual parameters
 133   3              u8x8->x_offset = u8x8->display_info->default_x_offset;
 134   3            }
 135   2            else
 136   2            {
 137   3              u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_flip1_seq);
*** ERROR C208 IN LINE 137 OF ..\U8G2\CSRC\U8X8_D_SH1106_64X32.C: '_u8x8_cad_SendSequence': too many actual parameters
 138   3              u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 139   3            }
 140   2            break;
 141   2      #ifdef U8X8_WITH_SET_CONTRAST
 142   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 143   2            u8x8_cad_StartTransfer(u8x8);
 144   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 145   2            u8x8_cad_SendArg(u8x8, arg_int ); /* ssd1306 has range from 0 to 255 */
 146   2            u8x8_cad_EndTransfer(u8x8);
 147   2            break;
 148   2      #endif
 149   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
 150   2            u8x8_cad_StartTransfer(u8x8);
 151   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 152   2            x *= 8;
 153   2            x += u8x8->x_offset;
 154   2            u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 155   2            u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 156   2            u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 157   2            
 158   2            do
 159   2            {
 160   3        c = ((u8x8_tile_t *)arg_ptr)->cnt;
 161   3        ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 162   3        u8x8_cad_SendData(u8x8, c*8, ptr);  /* note: SendData can not handle more than 255 bytes */
*** ERROR C208 IN LINE 162 OF ..\U8G2\CSRC\U8X8_D_SH1106_64X32.C: '_u8x8_cad_SendData': too many actual parameters
 163   3        arg_int--;
 164   3            } while( arg_int > 0 );
 165   2            
 166   2            u8x8_cad_EndTransfer(u8x8);
 167   2            break;
C51 COMPILER V9.01   U8X8_D_SH1106_64X32                                                   04/30/2021 10:55:25 PAGE 4   

 168   2          default:
 169   2            return 0;
 170   2        }
 171   1        return 1;
 172   1      }
 173          
 174          /* copied from SSD1306 */
 175          static const u8x8_display_info_t u8x8_sh1106_64x32_display_info =
 176          {
 177            /* chip_enable_level = */ 0,
 178            /* chip_disable_level = */ 1,
 179            
 180            /* post_chip_enable_wait_ns = */ 20,
 181            /* pre_chip_disable_wait_ns = */ 10,
 182            /* reset_pulse_width_ms = */ 100,   /* SSD1306: 3 us */
 183            /* post_reset_wait_ms = */ 100, /* far east OLEDs need much longer setup time */
 184            /* sda_setup_time_ns = */ 50,   /* SSD1306: 15ns, but cycle time is 100ns, so use 100/2 */
 185            /* sck_pulse_width_ns = */ 50,  /* SSD1306: 20ns, but cycle time is 100ns, so use 100/2, AVR: below 70: 8
             - MHz, >= 70 --> 4MHz clock */
 186            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns, increased to 8MHz (issue 215) */
 187            /* spi_mode = */ 0,   /* active high, rising edge */
 188            /* i2c_bus_clock_100kHz = */ 4,
 189            /* data_setup_time_ns = */ 40,
 190            /* write_pulse_width_ns = */ 150, /* SSD1306: cycle time is 300ns, so use 300/2 = 150 */
 191            /* tile_width = */ 8,
 192            /* tile_hight = */ 4,
 193            /* default_x_offset = */ 32,
 194            /* flipmode_x_offset = */ 36,
 195            /* pixel_width = */ 64,
 196            /* pixel_height = */ 32
 197          };
 198          
 199          uint8_t u8x8_d_sh1106_64x32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 200          {
 201   1          if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 202   1          {
 203   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_64x32_display_info);
 204   2            return 1;
 205   2          }
 206   1          else if ( msg == U8X8_MSG_DISPLAY_INIT )
 207   1          {
 208   2            u8x8_d_helper_display_init(u8x8);
 209   2            u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_64x32_init_seq);    
*** ERROR C208 IN LINE 209 OF ..\U8G2\CSRC\U8X8_D_SH1106_64X32.C: '_u8x8_cad_SendSequence': too many actual parameters
 210   2            return 1;
 211   2          }
 212   1          return u8x8_d_sh1106_64x32_generic(u8x8, msg, arg_int, arg_ptr);
 213   1      }
 214          
 215          

C51 COMPILATION COMPLETE.  0 WARNING(S),  9 ERROR(S)
