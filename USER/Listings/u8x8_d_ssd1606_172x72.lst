C51 COMPILER V9.01   U8X8_D_SSD1606_172X72                                                 04/30/2021 10:55:29 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE U8X8_D_SSD1606_172X72
OBJECT MODULE PLACED IN .\Objects\u8x8_d_ssd1606_172x72.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\csrc\u8x8_d_ssd1606_172x72.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,SP
                    -EED) BROWSE INCDIR(..\USER;..\SYS;..\BSP\BSP_485;..\BSP\BSP_ADC;..\BSP\BSP_KEY;..\BSP\BSP_OLED_IIC;..\APP) DEBUG OBJECTE
                    -XTEND PRINT(.\Listings\u8x8_d_ssd1606_172x72.lst) TABS(2) OBJECT(.\Objects\u8x8_d_ssd1606_172x72.obj)

line level    source

   1          /*
   2          
   3            u8x8_d_ssd1606_172x72.c
   4          
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2016, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33            
  34            SSD1606: 128x180x2 
  35            two-bit, four graylevels
  36            command 
  37              0x22: assign actions
  38              0x20: execute actions
  39            
  40            action for command 0x022 are (more or less guessed)
  41              bit 7:  Enable Clock
  42              bit 6:  Enable Charge Pump
  43              bit 5:  Load Temparture Value (???)
  44              bit 4:  Load LUT (???)
  45              bit 3:  Initial Display (???)
  46              bit 2:  Pattern Display --> Requires about 945ms with the LUT from below
  47              bit 1:  Disable Charge Pump
  48              bit 0:  Disable Clock
  49              
  50              Disable Charge Pump and Clock require about 267ms
  51              Enable Charge Pump and Clock require about 10ms
  52          
  53            Notes:
C51 COMPILER V9.01   U8X8_D_SSD1606_172X72                                                 04/30/2021 10:55:29 PAGE 2   

  54              - Introduced a refresh display message, which copies RAM to display
  55              - Charge pump and clock are only enabled for the transfer RAM to display
  56              - U8x8 will not really work because of the two buffers in the SSD1606, however U8g2 should be ok.
  57          
  58          */
  59          
  60          
  61          #include "u8x8.h"
*** ERROR C141 IN LINE 600 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 632 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 663 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
  62          
  63          
  64          #define L(a,b,c,d) (((a)<<6)|((b)<<4)|((c)<<2)|(d))
  65          
  66          
  67          /* GDE021A1, 2.1" EPD */
  68          static const uint8_t u8x8_d_ssd1606_172x72_gde021a1_init_seq[] = {
  69              
  70            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  71          
  72            U8X8_CA(0x10, 0x00),  /* Deep Sleep mode Control: Disable */
  73            U8X8_CA(0x11, 0x03),  /* Define data entry mode, x&y inc, x first */
  74            U8X8_CAA(0x44, 0, 31),  /* RAM x start & end, each byte has 4 pixel, 32*4=128 */
  75            U8X8_CAA(0x45, 0, 179), /* RAM y start & end, 179 MAX */
  76            
  77            U8X8_CA(0x4e, 0), /* set x pos, 0..31 */
  78            U8X8_CA(0x4f, 0), /* set y pos, 0...179 */
  79          
  80            U8X8_CA(0xf0, 0x1f),  /* set booster feedback to internal */
  81            U8X8_CA(0x22, 0xc0),  /* display update seq. option: enable clk, enable CP, .... todo: this is never acti
             -vated */
  82            
  83            U8X8_C(0x32), /* write LUT register*/
  84          
  85          #ifdef ORIGINAL_LUT
                
                /* wavefrom part of the LUT: absolute LUT... this will always force the destination color */
                U8X8_A4(0x00,0x00,0x00,0x55),  /* step 0 */
                U8X8_A4(0x00,0x00,0x55,0x55), /* step 1 */
                U8X8_A4(0x00,0x55,0x55,0x55),
                U8X8_A4(0xAA,0xAA,0xAA,0xAA),
                U8X8_A4(0x15,0x15,0x15,0x15),
                U8X8_A4(0x05,0x05,0x05,0x05),
                U8X8_A4(0x01,0x01,0x01,0x01),
                U8X8_A4(0x00,0x00,0x00,0x00),
                U8X8_A4(0x00,0x00,0x00,0x00),
                U8X8_A4(0x00,0x00,0x00,0x00),
                U8X8_A4(0x00,0x00,0x00,0x00),
                U8X8_A4(0x00,0x00,0x00,0x00),
                U8X8_A4(0x00,0x00,0x00,0x00),
                U8X8_A4(0x00,0x00,0x00,0x00),
                U8X8_A4(0x00,0x00,0x00,0x00),
                U8X8_A4(0x00,0x00,0x00,0x00),
                U8X8_A4(0x00,0x00,0x00,0x00),
                U8X8_A4(0x00,0x00,0x00,0x00),
                U8X8_A4(0x00,0x00,0x00,0x00),
                U8X8_A4(0x00,0x00,0x00,0x00), /* step 19 */
                
                /* timing part of the LUT */
                U8X8_A8(0x22,0xFB,0x22,0x1B,0x00,0x00,0x00,0x00),
                U8X8_A(0x00),U8X8_A(0x00),
C51 COMPILER V9.01   U8X8_D_SSD1606_172X72                                                 04/30/2021 10:55:29 PAGE 3   

              
              #else
 114          
 115            /* the following LUT will not change anything if the old and the new values are the same */
 116            /* 03 02 01 00  13 12 11 10   23 22 21 20 33 32 31 30         original */
 117            U8X8_A4(L(0, 0, 0, 0),  L(0, 0, 0, 0),  L(0, 0, 0, 0),  L(0, 1, 1, 1)),   // 0x00,0x00,0x00,0x55, step 0
 118            U8X8_A4(L(0, 0, 0, 0),  L(0, 0, 0, 0),  L(1, 0, 1, 1),  L(0, 1, 1, 1)),   // 0x00,0x00,0x55,0x55, step 1
 119            U8X8_A4(L(0, 0, 0, 0),  L(1, 1, 0, 1),  L(1, 0, 1, 1),  L(0, 1, 1, 1)),   // 0x00,0x55,0x55,0x55, step 2
 120            U8X8_A4(L(2, 2, 2, 0),  L(2, 2, 0, 2),  L(2, 0, 2, 2),  L(0, 2, 2, 2)),   // 0xAA,0xAA,0xAA,0xAA, step 3
 121            U8X8_A4(L(0, 1, 1, 0),  L(0, 1, 0, 1),  L(0, 0, 1, 1),  L(0, 1, 1, 1)),   // 0x15,0x15,0x15,0x15, step 4
 122            U8X8_A4(L(0, 0, 1, 0),  L(0, 0, 0, 1),  L(0, 0, 1, 1),  L(0, 0, 1, 1)),   // 0x05,0x05,0x05,0x05, step 5
 123            U8X8_A4(L(0, 0, 0, 0),  L(0, 0, 0, 1),  L(0, 0, 0, 1),  L(0, 0, 0, 1)),   // 0x01,0x01,0x01,0x01, step 6
 124            U8X8_A4(0x00,0x00,0x00,0x00),
 125            U8X8_A4(0x00,0x00,0x00,0x00),
 126            U8X8_A4(0x00,0x00,0x00,0x00),
 127            U8X8_A4(0x00,0x00,0x00,0x00),
 128            U8X8_A4(0x00,0x00,0x00,0x00),
 129            U8X8_A4(0x00,0x00,0x00,0x00),
 130            U8X8_A4(0x00,0x00,0x00,0x00),
 131            U8X8_A4(0x00,0x00,0x00,0x00),
 132            U8X8_A4(0x00,0x00,0x00,0x00),
 133            U8X8_A4(0x00,0x00,0x00,0x00),
 134            U8X8_A4(0x00,0x00,0x00,0x00),
 135            U8X8_A4(0x00,0x00,0x00,0x00),
 136            U8X8_A4(0x00,0x00,0x00,0x00), /* step 19 */
 137            
 138            /* timing part of the LUT */
 139            U8X8_A8(0x22,0xFB,0x22,0x1B,0x00,0x00,0x00,0x00),
 140            U8X8_A(0x00),U8X8_A(0x00),
 141          
 142          #endif
 143            
 144            U8X8_CA(0x2c, 0xa0),  /* write vcom value*/
 145            U8X8_CA(0x3c, 0x63),  /* select boarder waveform */
 146            U8X8_CA(0x22, 0xc4),  /* display update seq. option: clk -> CP -> LUT -> initial display -> pattern displ
             -ay */
 147              /* 0x0c4 is mentioned in chapter 9.2 of the GDE021A1 data sheet */
 148            
 149            U8X8_END_TRANSFER(),              /* disable chip */
 150            U8X8_END()                  /* end of sequence */
 151          };
 152          
 153          static const uint8_t u8x8_d_ssd1606_to_display_seq[] = {
 154            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 155            
 156            
 157            //U8X8_CA(0x22, 0xc0),  /* display update seq. option: Enable clock and charge pump */
 158            //U8X8_C(0x20), /* execute sequence */
 159            //U8X8_DLY(10),
 160            /* strange, splitting 0x0c0 does not work reliable */
 161            
 162            U8X8_CA(0x22, 0xc4),  /* display update seq. option: clk -> CP -> LUT -> initial display -> pattern displ
             -ay */
 163            U8X8_C(0x20), /* execute sequence */
 164            U8X8_DLY(250),  /* the sequence above requires about 970ms */
 165            U8X8_DLY(250),
 166            U8X8_DLY(250),
 167            U8X8_DLY(230),
 168            
 169            U8X8_CA(0x22, 0x03),  /* disable clock and charge pump */
 170            U8X8_DLY(200),    /* this requres about 270ms */
 171            U8X8_DLY(90),  
C51 COMPILER V9.01   U8X8_D_SSD1606_172X72                                                 04/30/2021 10:55:29 PAGE 4   

 172            
 173            //U8X8_CA(0x10, 0x01), /* deep sleep mode */
 174            //U8X8_C(0x20),     /* execute sequence */
 175            U8X8_DLY(50),  
 176            
 177            U8X8_END_TRANSFER(),              /* disable chip */
 178            U8X8_END()                  /* end of sequence */
 179          };
 180          
 181          
 182          // static const uint8_t u8x8_d_ssd1606_172x72_powersave0_seq[] = {
 183          //   U8X8_START_TRANSFER(),               /* enable chip, delay is part of the transfer start */
 184          //   U8X8_END_TRANSFER(),               /* disable chip */
 185          //   U8X8_END()                   /* end of sequence */
 186          // };
 187          
 188          
 189          // static const uint8_t u8x8_d_ssd1606_172x72_powersave1_seq[] = {
 190          //   U8X8_START_TRANSFER(),               /* enable chip, delay is part of the transfer start */
 191          //   U8X8_END_TRANSFER(),               /* disable chip */
 192          //   U8X8_END()                   /* end of sequence */
 193          // };
 194          
 195          // static const uint8_t u8x8_d_ssd1606_172x72_flip0_seq[] = {
 196          //   U8X8_START_TRANSFER(),               /* enable chip, delay is part of the transfer start */
 197          //   U8X8_END_TRANSFER(),               /* disable chip */
 198          //   U8X8_END()                   /* end of sequence */
 199          // };
 200          
 201          // static const uint8_t u8x8_d_ssd1606_172x72_flip1_seq[] = {
 202          //   U8X8_START_TRANSFER(),               /* enable chip, delay is part of the transfer start */
 203          //   U8X8_END_TRANSFER(),               /* disable chip */
 204          //   U8X8_END()                   /* end of sequence */
 205          // };
 206          
 207          
 208          static uint8_t *u8x8_convert_tile_for_ssd1606(uint8_t *t)
 209          {
 210   1        uint8_t i;
 211   1        uint16_t r;
 212   1        static uint8_t buf[16];
 213   1        uint8_t *pbuf = buf;
 214   1      
 215   1        for( i = 0; i < 8; i++ )
 216   1        {
 217   2          r = u8x8_upscale_byte(~(*t++));
 218   2          *pbuf++ = (r>>8) & 255;
 219   2          *pbuf++ = r & 255;
 220   2        }
 221   1        return buf;
 222   1      }
 223          
 224          static void u8x8_d_ssd1606_draw_tile(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
 225          static void u8x8_d_ssd1606_draw_tile(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
 226          {
 227   1        uint8_t x, c, page;
 228   1        uint8_t *ptr;
 229   1        u8x8_cad_StartTransfer(u8x8);
 230   1      
 231   1        page = u8x8->display_info->tile_height;
 232   1        page --;
 233   1        page -= (((u8x8_tile_t *)arg_ptr)->y_pos);
C51 COMPILER V9.01   U8X8_D_SSD1606_172X72                                                 04/30/2021 10:55:29 PAGE 5   

 234   1        page *= 2;
 235   1      
 236   1      
 237   1        x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 238   1        x *= 8;
 239   1        x += u8x8->x_offset;
 240   1      
 241   1        u8x8_cad_SendCmd(u8x8, 0x00f ); /* scan start */
 242   1        u8x8_cad_SendArg(u8x8, 0);
 243   1      
 244   1        u8x8_cad_SendCmd(u8x8, 0x011 ); /* cursor increment mode */
 245   1        u8x8_cad_SendArg(u8x8, 3);
 246   1      
 247   1        u8x8_cad_SendCmd(u8x8, 0x045 ); /* window start column */
 248   1        u8x8_cad_SendArg(u8x8, 0);
 249   1        u8x8_cad_SendArg(u8x8, 179);    /* end of display */
 250   1      
 251   1        u8x8_cad_SendCmd(u8x8, 0x044 ); /* window end page */
 252   1        u8x8_cad_SendArg(u8x8, page);
 253   1        u8x8_cad_SendArg(u8x8, page+1);
 254   1      
 255   1        u8x8_cad_SendCmd(u8x8, 0x04f ); /* window column */
 256   1        u8x8_cad_SendArg(u8x8, x);
 257   1      
 258   1        u8x8_cad_SendCmd(u8x8, 0x04e ); /* window row */
 259   1        u8x8_cad_SendArg(u8x8, page);
 260   1      
 261   1        u8x8_cad_SendCmd(u8x8, 0x024 );
 262   1        
 263   1        do
 264   1        {
 265   2          c = ((u8x8_tile_t *)arg_ptr)->cnt;
 266   2          ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 267   2          do
 268   2          {
 269   3            u8x8_cad_SendData(u8x8, 16, u8x8_convert_tile_for_ssd1606(ptr));
*** ERROR C208 IN LINE 269 OF ..\U8G2\CSRC\U8X8_D_SSD1606_172X72.C: '_u8x8_cad_SendData': too many actual parameters
 270   3            ptr += 8;
 271   3            x += 8;
 272   3            c--;
 273   3          } while( c > 0 );
 274   2          
 275   2          arg_int--;
 276   2        } while( arg_int > 0 );
 277   1        
 278   1        u8x8_cad_EndTransfer(u8x8);
 279   1      }
 280          
 281          
 282          static uint8_t u8x8_d_ssd1606_172x72_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 283          {
 284   1        switch(msg)
 285   1        {
 286   2          /* handled by the calling function
 287   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 288   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1606_172x72_display_info);
 289   2            break;
 290   2          */
 291   2          case U8X8_MSG_DISPLAY_INIT:
 292   2      
 293   2            u8x8_d_helper_display_init(u8x8);
 294   2            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1606_172x72_gde021a1_init_seq);    
C51 COMPILER V9.01   U8X8_D_SSD1606_172X72                                                 04/30/2021 10:55:29 PAGE 6   

*** ERROR C208 IN LINE 294 OF ..\U8G2\CSRC\U8X8_D_SSD1606_172X72.C: '_u8x8_cad_SendSequence': too many actual parameters
 295   2          
 296   2            /* special code for the SSD1606... */
 297   2            /* ensure that the initial buffer is clear and all eInk is set to white */
 298   2            /* this is done here, because the LUT will be of that kind, that it uses the previous color */
 299   2            /* make everything black */
 300   2            u8x8_FillDisplay(u8x8);   
 301   2            /* write content to the display */
 302   2            u8x8_RefreshDisplay(u8x8);
 303   2            /* now make everything clear */
 304   2            u8x8_FillDisplay(u8x8);   
 305   2            /* write content to the display */
 306   2            u8x8_RefreshDisplay(u8x8);
 307   2            /* now make everything clear */
 308   2            u8x8_ClearDisplay(u8x8);    
 309   2            /* write content to the display */
 310   2            u8x8_RefreshDisplay(u8x8);
 311   2      
 312   2            u8x8_ClearDisplay(u8x8);    
 313   2            /* write content to the display */
 314   2            u8x8_RefreshDisplay(u8x8);
 315   2          
 316   2            break;
 317   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 318   2      /*
 319   2            if ( arg_int == 0 )
 320   2        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1606_172x72_powersave0_seq);
 321   2            else
 322   2        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1606_172x72_powersave1_seq);
 323   2      */
 324   2            break;
 325   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 326   2      /*
 327   2            if ( arg_int == 0 )
 328   2            {
 329   2        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1606_172x72_flip0_seq);
 330   2        u8x8->x_offset = u8x8->display_info->default_x_offset;
 331   2            }
 332   2            else
 333   2            {
 334   2        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1606_172x72_flip1_seq);
 335   2        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 336   2            }
 337   2      */
 338   2            break;
 339   2      #ifdef U8X8_WITH_SET_CONTRAST
 340   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 341   2      /*
 342   2            u8x8_cad_StartTransfer(u8x8);
 343   2            u8x8_cad_EndTransfer(u8x8);
 344   2      */
 345   2            break;
 346   2      #endif
 347   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
 348   2            u8x8_d_ssd1606_draw_tile(u8x8, arg_int, arg_ptr);
 349   2            break;
 350   2          case U8X8_MSG_DISPLAY_REFRESH:
 351   2            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1606_to_display_seq);    
*** ERROR C208 IN LINE 351 OF ..\U8G2\CSRC\U8X8_D_SSD1606_172X72.C: '_u8x8_cad_SendSequence': too many actual parameters
 352   2            break;
 353   2          default:
 354   2            return 0;
C51 COMPILER V9.01   U8X8_D_SSD1606_172X72                                                 04/30/2021 10:55:29 PAGE 7   

 355   2        }
 356   1        return 1;
 357   1      }
 358          
 359          
 360          static const u8x8_display_info_t u8x8_ssd1606_172x72_display_info =
 361          {
 362            /* chip_enable_level = */ 0,
 363            /* chip_disable_level = */ 1,
 364            
 365            /* post_chip_enable_wait_ns = */ 120,
 366            /* pre_chip_disable_wait_ns = */ 60,
 367            /* reset_pulse_width_ms = */ 100,   
 368            /* post_reset_wait_ms = */ 100, 
 369            /* sda_setup_time_ns = */ 50,   /* SSD1606: */
 370            /* sck_pulse_width_ns = */ 100, /* SSD1606: 100ns */
 371            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 372            /* spi_mode = */ 0,   /* active high, rising edge */
 373            /* i2c_bus_clock_100kHz = */ 4,
 374            /* data_setup_time_ns = */ 40,
 375            /* write_pulse_width_ns = */ 150, 
 376            /* tile_width = */ 22,    /* 22*8 = 176 */
 377            /* tile_hight = */ 9,   /* 9*8 = 72 */
 378            /* default_x_offset = */ 0,
 379            /* flipmode_x_offset = */ 0,
 380            /* pixel_width = */ 172,
 381            /* pixel_height = */ 72   
 382          };
 383          
 384          uint8_t u8x8_d_ssd1606_172x72(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 385          {
 386   1          if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 387   1          {
 388   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1606_172x72_display_info);
 389   2            return 1;
 390   2          }
 391   1          return u8x8_d_ssd1606_172x72_generic(u8x8, msg, arg_int, arg_ptr);
 392   1      }
 393          
 394          

C51 COMPILATION COMPLETE.  0 WARNING(S),  6 ERROR(S)
