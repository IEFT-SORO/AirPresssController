C51 COMPILER V9.01   U8X8_D_SH1107                                                         04/30/2021 10:55:25 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE U8X8_D_SH1107
OBJECT MODULE PLACED IN .\Objects\u8x8_d_sh1107.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\csrc\u8x8_d_sh1107.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,SPEED) BRO
                    -WSE INCDIR(..\USER;..\SYS;..\BSP\BSP_485;..\BSP\BSP_ADC;..\BSP\BSP_KEY;..\BSP\BSP_OLED_IIC;..\APP) DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\u8x8_d_sh1107.lst) TABS(2) OBJECT(.\Objects\u8x8_d_sh1107.obj)

line level    source

   1          /*
   2          
   3            u8x8_d_sh1107.c
   4          
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2017, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33            
  34          */
  35          
  36          
  37          #include "u8x8.h"
*** ERROR C141 IN LINE 600 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 632 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 663 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
  38          
  39          /* code copyied from SSD1306 */
  40          
  41          
  42          
  43          static const uint8_t u8x8_d_sh1107_64x128_noname_powersave0_seq[] = {
  44            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  45            U8X8_C(0x0af),                    /* display on */
  46            U8X8_END_TRANSFER(),              /* disable chip */
  47            U8X8_END()                  /* end of sequence */
  48          };
  49          
  50          static const uint8_t u8x8_d_sh1107_64x128_noname_powersave1_seq[] = {
C51 COMPILER V9.01   U8X8_D_SH1107                                                         04/30/2021 10:55:25 PAGE 2   

  51            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  52            U8X8_C(0x0ae),                    /* display off */
  53            U8X8_END_TRANSFER(),              /* disable chip */
  54            U8X8_END()                  /* end of sequence */
  55          };
  56          
  57          static const uint8_t u8x8_d_sh1107_64x128_noname_flip0_seq[] = {
  58            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  59            U8X8_C(0x0a1),        /* segment remap a0/a1*/
  60            U8X8_C(0x0c8),        /* c0: scan dir normal, c8: reverse */
  61            U8X8_END_TRANSFER(),              /* disable chip */
  62            U8X8_END()                  /* end of sequence */
  63          };
  64          
  65          static const uint8_t u8x8_d_sh1107_64x128_noname_flip1_seq[] = {
  66            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  67            U8X8_C(0x0a0),        /* segment remap a0/a1*/
  68            U8X8_C(0x0c0),        /* c0: scan dir normal, c8: reverse */
  69            U8X8_END_TRANSFER(),              /* disable chip */
  70            U8X8_END()                  /* end of sequence */
  71          };
  72          
  73          
  74          static uint8_t u8x8_d_sh1107_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  75          {
  76   1        uint8_t x, c;
  77   1        uint8_t *ptr;
  78   1        switch(msg)
  79   1        {
  80   2          /* handled by the calling function
  81   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
  82   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1107_64x128_noname_display_info);
  83   2            break;
  84   2          */
  85   2          /* handled by the calling function
  86   2          case U8X8_MSG_DISPLAY_INIT:
  87   2            u8x8_d_helper_display_init(u8x8);
  88   2            u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_init_seq);    
  89   2            break;
  90   2          */
  91   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
  92   2            if ( arg_int == 0 )
  93   2        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave0_seq);
*** ERROR C208 IN LINE 93 OF ..\U8G2\CSRC\U8X8_D_SH1107.C: '_u8x8_cad_SendSequence': too many actual parameters
  94   2            else
  95   2        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave1_seq);
*** ERROR C208 IN LINE 95 OF ..\U8G2\CSRC\U8X8_D_SH1107.C: '_u8x8_cad_SendSequence': too many actual parameters
  96   2            break;
  97   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
  98   2            if ( arg_int == 0 )
  99   2            {
 100   3        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip0_seq);
*** ERROR C208 IN LINE 100 OF ..\U8G2\CSRC\U8X8_D_SH1107.C: '_u8x8_cad_SendSequence': too many actual parameters
 101   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
 102   3            }
 103   2            else
 104   2            {
 105   3        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip1_seq);
*** ERROR C208 IN LINE 105 OF ..\U8G2\CSRC\U8X8_D_SH1107.C: '_u8x8_cad_SendSequence': too many actual parameters
 106   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 107   3            }
 108   2            break;
C51 COMPILER V9.01   U8X8_D_SH1107                                                         04/30/2021 10:55:25 PAGE 3   

 109   2      #ifdef U8X8_WITH_SET_CONTRAST
 110   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 111   2            u8x8_cad_StartTransfer(u8x8);
 112   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 113   2            u8x8_cad_SendArg(u8x8, arg_int ); /* sh1107 has range from 0 to 255 */
 114   2            u8x8_cad_EndTransfer(u8x8);
 115   2            break;
 116   2      #endif
 117   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
 118   2            u8x8_cad_StartTransfer(u8x8);
 119   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 120   2            x *= 8;
 121   2            x += u8x8->x_offset;
 122   2      
 123   2            //u8x8_cad_SendCmd(u8x8, 0x040 ); /* set line offset to 0 */
 124   2      
 125   2            // set column address
 126   2            u8x8_cad_SendCmd(u8x8, 0x010 | (x >> 4));
 127   2            u8x8_cad_SendCmd(u8x8, 0x000 | ((x & 15))); /* probably wrong, should be SendCmd */
 128   2            
 129   2            // set page address
 130   2            u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)); /* probably wrong, should be Send
             -Cmd */
 131   2          
 132   2            do
 133   2            {
 134   3        c = ((u8x8_tile_t *)arg_ptr)->cnt;
 135   3        ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 136   3        u8x8_cad_SendData(u8x8, c*8, ptr);  /* note: SendData can not handle more than 255 bytes */
*** ERROR C208 IN LINE 136 OF ..\U8G2\CSRC\U8X8_D_SH1107.C: '_u8x8_cad_SendData': too many actual parameters
 137   3        /*
 138   3        do
 139   3        {
 140   3          u8x8_cad_SendData(u8x8, 8, ptr);
 141   3          ptr += 8;
 142   3          c--;
 143   3        } while( c > 0 );
 144   3        */
 145   3        arg_int--;
 146   3            } while( arg_int > 0 );
 147   2            
 148   2            u8x8_cad_EndTransfer(u8x8);
 149   2            break;
 150   2          default:
 151   2            return 0;
 152   2        }
 153   1        return 1;
 154   1      }
 155          
 156          /*==================================================*/
 157          
 158          /* QG-6428TSWKG01 */
 159          static const uint8_t u8x8_d_sh1107_64x128_noname_init_seq[] = {
 160              
 161            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 162            
 163            
 164            U8X8_C(0x0ae),                    /* display off */
 165            U8X8_CA(0x0dc, 0x000),    /* start line */
 166            U8X8_CA(0x081, 0x02f),    /* [2] set contrast control */
 167            U8X8_C(0x020),                    /* use page addressing mode */
 168          
C51 COMPILER V9.01   U8X8_D_SH1107                                                         04/30/2021 10:55:25 PAGE 4   

 169            // U8X8_C(0x0a1),       /* segment remap a0/a1*/
 170            // U8X8_C(0x0c8),       /* c0: scan dir normal, c8: reverse */
 171            // Flipmode
 172            U8X8_C(0x0a0),        /* segment remap a0/a1*/
 173            U8X8_C(0x0c0),        /* c0: scan dir normal, c8: reverse */
 174            
 175            U8X8_CA(0x0a8, 0x7f),   /* 0x03f) multiplex ratio */
 176            U8X8_CA(0x0d3, 0x060),    /* display offset */
 177            U8X8_CA(0x0d5, 0x051),    /* clock divide ratio (0x00=1) and oscillator frequency (0x8) */
 178            U8X8_CA(0x0d9, 0x022),    /* [2] pre-charge period 0x022/f1*/
 179            U8X8_CA(0x0db, 0x035),    /* vcomh deselect level */  
 180            
 181            U8X8_C(0x0b0), /* set page address */
 182            U8X8_CA(0x0da, 0x012), /* set com pins */
 183            U8X8_C(0x0a4),        /* output ram to display */
 184            U8X8_C(0x0a6),        /* none inverted normal display mode */
 185              
 186            U8X8_END_TRANSFER(),              /* disable chip */
 187            U8X8_END()                  /* end of sequence */
 188          };
 189          
 190          static const u8x8_display_info_t u8x8_sh1107_64x128_noname_display_info =
 191          {
 192            /* chip_enable_level = */ 0,
 193            /* chip_disable_level = */ 1,
 194            
 195            /* post_chip_enable_wait_ns = */ 20,
 196            /* pre_chip_disable_wait_ns = */ 10,
 197            /* reset_pulse_width_ms = */ 100,   /* sh1107: 3 us */
 198            /* post_reset_wait_ms = */ 100, /* far east OLEDs need much longer setup time */
 199            /* sda_setup_time_ns = */ 50,   /* sh1107: 15ns, but cycle time is 100ns, so use 100/2 */
 200            /* sck_pulse_width_ns = */ 50,  /* sh1107: 20ns, but cycle time is 100ns, so use 100/2, AVR: below 70: 8 
             -MHz, >= 70 --> 4MHz clock */
 201            /* sck_clock_hz = */ 8000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 202            /* spi_mode = */ 0,   /* active high, rising edge */
 203            /* i2c_bus_clock_100kHz = */ 4,
 204            /* data_setup_time_ns = */ 40,
 205            /* write_pulse_width_ns = */ 150, /* sh1107: cycle time is 300ns, so use 300/2 = 150 */
 206            /* tile_width = */ 8,
 207            /* tile_height = */ 16,
 208            /* default_x_offset = */ 0,
 209            /* flipmode_x_offset = */ 0,
 210            /* pixel_width = */ 64,
 211            /* pixel_height = */ 128
 212          };
 213          
 214          uint8_t u8x8_d_sh1107_64x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 215          {
 216   1          
 217   1        if ( u8x8_d_sh1107_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 218   1          return 1;
 219   1        
 220   1        switch(msg)
 221   1        {
 222   2          case U8X8_MSG_DISPLAY_INIT:
 223   2            u8x8_d_helper_display_init(u8x8);
 224   2            u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_init_seq);    
*** ERROR C208 IN LINE 224 OF ..\U8G2\CSRC\U8X8_D_SH1107.C: '_u8x8_cad_SendSequence': too many actual parameters
 225   2            break;
 226   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 227   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1107_64x128_noname_display_info);
C51 COMPILER V9.01   U8X8_D_SH1107                                                         04/30/2021 10:55:25 PAGE 5   

 228   2            break;
 229   2          default:
 230   2            return 0;
 231   2        }
 232   1        return 1;
 233   1      }
 234          
 235          /*==================================================*/
 236          
 237          /* init sequence from Grove OLED 96x96 */
 238          static const uint8_t u8x8_d_sh1107_seeed_96x96_init_seq[] = {
 239              
 240            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 241            
 242            
 243            U8X8_C(0x0ae),                    /* display off */
 244            U8X8_CA(0x0d5, 0x050),    /* clock divide ratio (0x00=1) and oscillator frequency (0x5) */
 245            U8X8_C(0x020),                    /* use page addressing mode */
 246            //U8X8_CA(0x0a8, 0x03f),    /* multiplex ratio */
 247            U8X8_CA(0x0d3, 0x000),    /* display offset */
 248            U8X8_CA(0x0dc, 0x000),    /* start line */
 249            //U8X8_CA(0x020, 0x000),    /* page addressing mode */
 250            
 251            U8X8_C(0x0a1),        /* segment remap a0/a1*/
 252            U8X8_C(0x0c8),        /* c0: scan dir normal, c8: reverse */
 253            // Flipmode
 254            // U8X8_C(0x0a0),       /* segment remap a0/a1*/
 255            // U8X8_C(0x0c0),       /* c0: scan dir normal, c8: reverse */
 256            
 257            //U8X8_CA(0x0da, 0x012),    /* com pin HW config, sequential com pin config (bit 4), disable left/right re
             -map (bit 5) */
 258          
 259            U8X8_CA(0x081, 0x080),    /* [2] set contrast control */
 260            U8X8_CA(0x0ad, 0x080),    /* */  
 261            U8X8_CA(0x0d9, 0x01f),    /* [2] pre-charge period 0x022/f1*/
 262            U8X8_CA(0x0db, 0x027),    /* vcomh deselect level */  
 263            // if vcomh is 0, then this will give the biggest range for contrast control issue #98
 264            // restored the old values for the noname constructor, because vcomh=0 will not work for all OLEDs, #116
 265            
 266            //U8X8_C(0x02e),        /* Deactivate scroll */ 
 267            U8X8_C(0x0a4),        /* output ram to display */
 268            U8X8_C(0x0a6),        /* none inverted normal display mode */
 269              
 270            U8X8_END_TRANSFER(),              /* disable chip */
 271            U8X8_END()                  /* end of sequence */
 272          };
 273          
 274          static const u8x8_display_info_t u8x8_sh1107_seeed_96x96_display_info =
 275          {
 276            /* chip_enable_level = */ 0,
 277            /* chip_disable_level = */ 1,
 278            
 279            /* post_chip_enable_wait_ns = */ 20,
 280            /* pre_chip_disable_wait_ns = */ 10,
 281            /* reset_pulse_width_ms = */ 100,   /* */
 282            /* post_reset_wait_ms = */ 100, /* far east OLEDs need much longer setup time */
 283            /* sda_setup_time_ns = */ 100,    /* cycle time is 100ns, so use 100/2 */
 284            /* sck_pulse_width_ns = */ 100, /* cycle time is 100ns, so use 100/2, AVR: below 70: 8 MHz, >= 70 --> 4M
             -Hz clock */
 285            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 286            /* spi_mode = */ 0,   /* active high, rising edge */
C51 COMPILER V9.01   U8X8_D_SH1107                                                         04/30/2021 10:55:25 PAGE 6   

 287            /* i2c_bus_clock_100kHz = */ 4,
 288            /* data_setup_time_ns = */ 40,
 289            /* write_pulse_width_ns = */ 150, /* sh1107: cycle time is 300ns, so use 300/2 = 150 */
 290            /* tile_width = */ 12,
 291            /* tile_hight = */ 12,
 292            /* default_x_offset = */ 0,
 293            /* flipmode_x_offset = */ 0,
 294            /* pixel_width = */ 96,
 295            /* pixel_height = */ 96
 296          };
 297          
 298          uint8_t u8x8_d_sh1107_seeed_96x96(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 299          {
 300   1          
 301   1        if ( u8x8_d_sh1107_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 302   1          return 1;
 303   1        
 304   1        switch(msg)
 305   1        {
 306   2          case U8X8_MSG_DISPLAY_INIT:
 307   2            u8x8_d_helper_display_init(u8x8);
 308   2            u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_seeed_96x96_init_seq);    
*** ERROR C208 IN LINE 308 OF ..\U8G2\CSRC\U8X8_D_SH1107.C: '_u8x8_cad_SendSequence': too many actual parameters
 309   2            break;
 310   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 311   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1107_seeed_96x96_display_info);
 312   2            break;
 313   2          default:
 314   2            return 0;
 315   2        }
 316   1        return 1;
 317   1      }
 318          
 319          
 320          /*==================================================*/
 321          /* 128x128 OLED: this display has a very strange x offset */
 322          
 323          /* sequence taken over from 64x128 sequence, because it seems to work mostly */
 324          static const uint8_t u8x8_d_sh1107_128x128_init_seq[] = {
 325              
 326            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 327            
 328            
 329            U8X8_C(0x0ae),                    /* display off */
 330            U8X8_CA(0x0dc, 0x000),    /* start line */
 331            U8X8_CA(0x081, 0x02f),    /* [2] set contrast control */
 332            U8X8_C(0x020),                    /* use page addressing mode */
 333          
 334            // U8X8_C(0x0a1),       /* segment remap a0/a1*/
 335            // U8X8_C(0x0c8),       /* c0: scan dir normal, c8: reverse */
 336            // Flipmode
 337            U8X8_C(0x0a0),        /* segment remap a0/a1*/
 338            U8X8_C(0x0c0),        /* c0: scan dir normal, c8: reverse */
 339            
 340            U8X8_CA(0x0a8, 0x7f),   /* 0x03f multiplex ratio */
 341            //U8X8_CA(0x0d3, 0x060),    /* display offset (removed, not in datasheet ) */
 342            U8X8_CA(0x0d5, 0x050),    /* clock divide ratio (0x00=1) and oscillator frequency (0x8), changed to 0x051,
             - issue 501 */
 343            U8X8_CA(0x0d9, 0x022),    /* [2] pre-charge period 0x022/f1*/
 344            U8X8_CA(0x0db, 0x035),    /* vcomh deselect level */  
 345            
 346            U8X8_C(0x0b0), /* set page address */
C51 COMPILER V9.01   U8X8_D_SH1107                                                         04/30/2021 10:55:25 PAGE 7   

 347            U8X8_CA(0x0da, 0x012), /* set com pins */
 348            U8X8_C(0x0a4),        /* output ram to display */
 349            U8X8_C(0x0a6),        /* none inverted normal display mode */
 350              
 351            U8X8_END_TRANSFER(),              /* disable chip */
 352            U8X8_END()                  /* end of sequence */
 353          };
 354          
 355          
 356          static const u8x8_display_info_t u8x8_sh1107_128x128_display_info =
 357          {
 358            /* chip_enable_level = */ 0,
 359            /* chip_disable_level = */ 1,
 360            
 361            /* post_chip_enable_wait_ns = */ 20,
 362            /* pre_chip_disable_wait_ns = */ 10,
 363            /* reset_pulse_width_ms = */ 100,   /* */
 364            /* post_reset_wait_ms = */ 100, /* far east OLEDs need much longer setup time */
 365            /* sda_setup_time_ns = */ 100,    /* cycle time is 100ns, so use 100/2 */
 366            /* sck_pulse_width_ns = */ 100, /* cycle time is 100ns, so use 100/2, AVR: below 70: 8 MHz, >= 70 --> 4M
             -Hz clock */
 367            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 368            /* spi_mode = */ 0,   /* active high, rising edge */
 369            /* i2c_bus_clock_100kHz = */ 4,
 370            /* data_setup_time_ns = */ 40,
 371            /* write_pulse_width_ns = */ 150, /* sh1107: cycle time is 300ns, so use 300/2 = 150 */
 372            /* tile_width = */ 16,
 373            /* tile_hight = */ 16,
 374            /* default_x_offset = */ 96,
 375            /* flipmode_x_offset = */ 96,
 376            /* pixel_width = */ 128,
 377            /* pixel_height = */ 128
 378          };
 379          
 380          uint8_t u8x8_d_sh1107_128x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 381          {
 382   1          
 383   1        if ( u8x8_d_sh1107_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 384   1          return 1;
 385   1        
 386   1        switch(msg)
 387   1        {
 388   2          case U8X8_MSG_DISPLAY_INIT:
 389   2            u8x8_d_helper_display_init(u8x8);
 390   2            u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_128x128_init_seq);    
*** ERROR C208 IN LINE 390 OF ..\U8G2\CSRC\U8X8_D_SH1107.C: '_u8x8_cad_SendSequence': too many actual parameters
 391   2            break;
 392   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 393   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1107_128x128_display_info);
 394   2            break;
 395   2          default:
 396   2            return 0;
 397   2        }
 398   1        return 1;
 399   1      }
 400          
 401          /*==================================================*/
 402          /* pimoroni_128x128_display */
 403          
 404          static const u8x8_display_info_t u8x8_sh1107_pimoroni_128x128_display_info =
 405          {
C51 COMPILER V9.01   U8X8_D_SH1107                                                         04/30/2021 10:55:25 PAGE 8   

 406            /* chip_enable_level = */ 0,
 407            /* chip_disable_level = */ 1,
 408            
 409            /* post_chip_enable_wait_ns = */ 20,
 410            /* pre_chip_disable_wait_ns = */ 10,
 411            /* reset_pulse_width_ms = */ 100,   /* */
 412            /* post_reset_wait_ms = */ 100, /* far east OLEDs need much longer setup time */
 413            /* sda_setup_time_ns = */ 100,    /* cycle time is 100ns, so use 100/2 */
 414            /* sck_pulse_width_ns = */ 100, /* cycle time is 100ns, so use 100/2, AVR: below 70: 8 MHz, >= 70 --> 4M
             -Hz clock */
 415            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 416            /* spi_mode = */ 0,   /* active high, rising edge */
 417            /* i2c_bus_clock_100kHz = */ 4,
 418            /* data_setup_time_ns = */ 40,
 419            /* write_pulse_width_ns = */ 150, /* sh1107: cycle time is 300ns, so use 300/2 = 150 */
 420            /* tile_width = */ 16,
 421            /* tile_hight = */ 16,
 422            /* default_x_offset = */ 0,
 423            /* flipmode_x_offset = */ 0,
 424            /* pixel_width = */ 128,
 425            /* pixel_height = */ 128
 426          };
 427          
 428          uint8_t u8x8_d_sh1107_pimoroni_128x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 429          {
 430   1          
 431   1        if ( u8x8_d_sh1107_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 432   1          return 1;
 433   1        
 434   1        switch(msg)
 435   1        {
 436   2          case U8X8_MSG_DISPLAY_INIT:
 437   2            u8x8_d_helper_display_init(u8x8);
 438   2            u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_128x128_init_seq);    
*** ERROR C208 IN LINE 438 OF ..\U8G2\CSRC\U8X8_D_SH1107.C: '_u8x8_cad_SendSequence': too many actual parameters
 439   2            break;
 440   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 441   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1107_pimoroni_128x128_display_info);
 442   2            break;
 443   2          default:
 444   2            return 0;
 445   2        }
 446   1        return 1;
 447   1      }
 448          
 449          /*==================================================*/
 450          /*
 451          Name:   SH1107_seeed_128x128
 452          URL:  https://www.seeedstudio.com/Grove-OLED-Display-1-12-V2.html 
 453          Display is there in my lab. Backside PCB label: "OLED Display 1.12 inch v1.0"
 454          Tookover code from SSD1327_SEEED_96X96 because none of the other displays did work
 455          and at least the 96x96 driver did show something.
 456          */
 457          
 458          static const u8x8_display_info_t u8x8_seeed_128x128_display_info =
 459          {
 460            /* chip_enable_level = */ 0,
 461            /* chip_disable_level = */ 1,
 462            
 463            /* post_chip_enable_wait_ns = */ 20,
 464            /* pre_chip_disable_wait_ns = */ 10,
C51 COMPILER V9.01   U8X8_D_SH1107                                                         04/30/2021 10:55:25 PAGE 9   

 465            /* reset_pulse_width_ms = */ 100,   /* */
 466            /* post_reset_wait_ms = */ 100, /* far east OLEDs need much longer setup time */
 467            /* sda_setup_time_ns = */ 100,    /* cycle time is 100ns, so use 100/2 */
 468            /* sck_pulse_width_ns = */ 100, /* cycle time is 100ns, so use 100/2, AVR: below 70: 8 MHz, >= 70 --> 4M
             -Hz clock */
 469            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 470            /* spi_mode = */ 0,   /* active high, rising edge */
 471            /* i2c_bus_clock_100kHz = */ 2,   // 400kHz does not work, but 200kHz seems to be ok
 472            /* data_setup_time_ns = */ 40,
 473            /* write_pulse_width_ns = */ 150, /* sh1107: cycle time is 300ns, so use 300/2 = 150 */
 474            /* tile_width = */ 16,
 475            /* tile_hight = */ 16,
 476            /* default_x_offset = */ 0,
 477            /* flipmode_x_offset = */ 0,
 478            /* pixel_width = */ 128,
 479            /* pixel_height = */ 128
 480          };
 481          
 482          uint8_t u8x8_d_sh1107_seeed_128x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 483          {
 484   1          
 485   1        if ( u8x8_d_sh1107_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 486   1          return 1;
 487   1        
 488   1        switch(msg)
 489   1        {
 490   2          case U8X8_MSG_DISPLAY_INIT:
 491   2            u8x8_d_helper_display_init(u8x8);
 492   2            u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_128x128_init_seq); 
*** ERROR C208 IN LINE 492 OF ..\U8G2\CSRC\U8X8_D_SH1107.C: '_u8x8_cad_SendSequence': too many actual parameters
 493   2            break;
 494   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 495   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_seeed_128x128_display_info);
 496   2            break;
 497   2          default:
 498   2            return 0;
 499   2        }
 500   1        return 1;
 501   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  13 ERROR(S)
