C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE U8X8_D_SSD1327
OBJECT MODULE PLACED IN .\Objects\u8x8_d_ssd1327.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\csrc\u8x8_d_ssd1327.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,SPEED) BR
                    -OWSE INCDIR(..\USER;..\SYS;..\BSP\BSP_485;..\BSP\BSP_ADC;..\BSP\BSP_KEY;..\BSP\BSP_OLED_IIC;..\APP) DEBUG OBJECTEXTEND P
                    -RINT(.\Listings\u8x8_d_ssd1327.lst) TABS(2) OBJECT(.\Objects\u8x8_d_ssd1327.obj)

line level    source

   1          /*
   2          
   3            u8x8_d_ssd1327.c
   4          
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2016, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33            
  34          */
  35          
  36          
  37          #include "u8x8.h"
*** ERROR C141 IN LINE 600 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 632 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 663 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
  38          
  39          
  40          static const uint8_t u8x8_d_ssd1327_96x96_powersave0_seq[] = {
  41            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  42            U8X8_C(0x0af),                    /* display on */
  43            U8X8_END_TRANSFER(),              /* disable chip */
  44            U8X8_END()                  /* end of sequence */
  45          };
  46          
  47          static const uint8_t u8x8_d_ssd1327_96x96_powersave1_seq[] = {
  48            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  49            U8X8_C(0x0ae),                    /* display off */
  50            U8X8_END_TRANSFER(),              /* disable chip */
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 2   

  51            U8X8_END()                  /* end of sequence */
  52          };
  53          
  54          
  55          static const uint8_t u8x8_d_ssd1327_seeed_96x96_flip0_seq[] = {
  56            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  57            U8X8_CA(0x0a2, 0x020),    /* display offset, shift mapping ram counter */
  58            U8X8_CA(0x0a0, 0x051),    /* remap configuration */
  59            U8X8_END_TRANSFER(),              /* disable chip */
  60            U8X8_END()                  /* end of sequence */
  61          };
  62          
  63          static const uint8_t u8x8_d_ssd1327_seeed_96x96_flip1_seq[] = {
  64            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  65            U8X8_CA(0x0a2, 0x060),    /* display offset, shift mapping ram counter */
  66            U8X8_CA(0x0a0, 0x042),    /* remap configuration */
  67            U8X8_END_TRANSFER(),              /* disable chip */
  68            U8X8_END()                  /* end of sequence */
  69          };
  70          
  71          
  72          static const uint8_t u8x8_d_ssd1327_winstar_96x64_flip0_seq[] = {
  73            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */  
  74            U8X8_CA(0x0a0, 0x042),    /* remap configuration */
  75            U8X8_CA(0x0a2, 0x000),    /* display offset, shift mapping ram counter */
  76            U8X8_END_TRANSFER(),              /* disable chip */
  77            U8X8_END()                  /* end of sequence */
  78          };
  79          
  80          static const uint8_t u8x8_d_ssd1327_winstar_96x64_flip1_seq[] = {
  81            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  82            U8X8_CA(0x0a0, 0x051),    /* remap configuration */
  83            U8X8_CA(0x0a2, 0x040),    /* display offset, shift mapping ram counter */
  84            U8X8_END_TRANSFER(),              /* disable chip */
  85            U8X8_END()                  /* end of sequence */
  86          };
  87          
  88          /*
  89            input:
  90              one tile (8 Bytes)
  91            output:
  92              Tile for ssd1327 (32 Bytes)
  93          */
  94          
  95          static uint8_t u8x8_ssd1327_8to32_dest_buf[32];
  96          
  97          static uint8_t *u8x8_ssd1327_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
  98          {
  99   1        uint8_t v;
 100   1        uint8_t a,b;
 101   1        uint8_t i, j;
 102   1        uint8_t *dest;
 103   1        
 104   1        for( j = 0; j < 4; j++ )
 105   1        {
 106   2          dest = u8x8_ssd1327_8to32_dest_buf;
 107   2          dest += j;
 108   2          a =*ptr;
 109   2          ptr++;
 110   2          b = *ptr;
 111   2          ptr++;
 112   2          for( i = 0; i < 8; i++ )
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 3   

 113   2          {
 114   3            v = 0;
 115   3            if ( a&1 ) v |= 0xf0;
 116   3            if ( b&1 ) v |= 0x0f;
 117   3            *dest = v;
 118   3            dest+=4;
 119   3            a >>= 1;
 120   3            b >>= 1;
 121   3          }
 122   2        }
 123   1        
 124   1        return u8x8_ssd1327_8to32_dest_buf;
 125   1      }
 126          
 127          
 128          
 129          
 130          static uint8_t u8x8_d_ssd1327_96x96_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 131          {
 132   1        uint8_t x, y, c;
 133   1        uint8_t *ptr;
 134   1        switch(msg)
 135   1        {
 136   2          /* handled by the calling function
 137   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 138   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1327_96x96_display_info);
 139   2            break;
 140   2          */
 141   2          /* handled by the calling function
 142   2          case U8X8_MSG_DISPLAY_INIT:
 143   2            u8x8_d_helper_display_init(u8x8);
 144   2            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_96x96_init_seq);    
 145   2            break;
 146   2          */
 147   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 148   2            if ( arg_int == 0 )
 149   2        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_96x96_powersave0_seq);
*** ERROR C208 IN LINE 149 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 150   2            else
 151   2        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_96x96_powersave1_seq);
*** ERROR C208 IN LINE 151 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 152   2            break;
 153   2      #ifdef U8X8_WITH_SET_CONTRAST
 154   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 155   2            u8x8_cad_StartTransfer(u8x8);
 156   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 157   2            u8x8_cad_SendArg(u8x8, arg_int ); /* ssd1327 has range from 0 to 255 */
 158   2            u8x8_cad_EndTransfer(u8x8);
 159   2            break;
 160   2      #endif
 161   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
 162   2            u8x8_cad_StartTransfer(u8x8);
 163   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 164   2            x *= 4;
 165   2            x+=u8x8->x_offset/2;
 166   2          
 167   2            y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 168   2            y *= 8;
 169   2          
 170   2            u8x8_cad_SendCmd(u8x8, 0x075 ); /* set row address, moved out of the loop (issue 302) */
 171   2            u8x8_cad_SendArg(u8x8, y);
 172   2            u8x8_cad_SendArg(u8x8, y+7);
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 4   

 173   2          
 174   2            
 175   2            do
 176   2            {
 177   3        c = ((u8x8_tile_t *)arg_ptr)->cnt;
 178   3        ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 179   3      
 180   3        do
 181   3        {
 182   4          u8x8_cad_SendCmd(u8x8, 0x015 ); /* set column address */
 183   4          u8x8_cad_SendArg(u8x8, x ); /* start */
 184   4          u8x8_cad_SendArg(u8x8, x+3 ); /* end */
 185   4      
 186   4          
 187   4          u8x8_cad_SendData(u8x8, 32, u8x8_ssd1327_8to32(u8x8, ptr));
*** ERROR C208 IN LINE 187 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendData': too many actual parameters
 188   4          ptr += 8;
 189   4          x += 4;
 190   4          c--;
 191   4        } while( c > 0 );
 192   3        
 193   3        //x += 4;
 194   3        arg_int--;
 195   3            } while( arg_int > 0 );
 196   2            
 197   2            u8x8_cad_EndTransfer(u8x8);
 198   2            break;
 199   2          default:
 200   2            return 0;
 201   2        }
 202   1        return 1;
 203   1      }
 204          
 205          /*=============================================*/
 206          /*
 207            Winstar WEA009664B 96x64 OLED Display, 1.1 inch OLED
 208            https://www.winstar.com.tw/products/oled-module/graphic-oled-display/96x64-oled.html
 209          
 210            https://github.com/olikraus/u8g2/issues/1050
 211          */
 212          
 213          static const u8x8_display_info_t u8x8_ssd1327_winstar_96x64_display_info =
 214          {
 215            /* chip_enable_level = */ 0,
 216            /* chip_disable_level = */ 1,
 217            
 218            /* post_chip_enable_wait_ns = */ 20,
 219            /* pre_chip_disable_wait_ns = */ 10,
 220            /* reset_pulse_width_ms = */ 100,   
 221            /* post_reset_wait_ms = */ 100,     /**/
 222            /* sda_setup_time_ns = */ 100,    /* */
 223            /* sck_pulse_width_ns = */ 100, /*  */
 224            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 225            /* spi_mode = */ 0,   /* active high, rising edge */
 226            /* i2c_bus_clock_100kHz = */ 1, /* use 1 instead of 4, because the SSD1327 seems to be very slow */
 227            /* data_setup_time_ns = */ 40,
 228            /* write_pulse_width_ns = */ 60,  
 229            /* tile_width = */ 12,
 230            /* tile_hight = */ 8,
 231            /* default_x_offset = */ 16,    /* changed to 16, issue 1050 */
 232            /* flipmode_x_offset = */ 16,   /* changed to 16, issue 1050 */
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 5   

 233            /* pixel_width = */ 96,
 234            /* pixel_height = */ 64
 235          };
 236          
 237          /*
 238            Write_Cmd(0xAE);  //Set Display Off     OK
 239            Write_Cmd(0x81);  //Contrast Level  OK
 240              Write_Cmd(0xdF);  //      VALUE WRONG????
 241            Write_Cmd(0xD9);  //Pre-charge Period
 242              Write_Cmd(0x00);
 243            Write_Cmd(0xA0);  //Set Re-map    OK
 244            Write_Cmd(0x42);  //Default Setting OK
 245            Write_Cmd(0xA1);  //Set Display Start Line  OK
 246            Write_Cmd(0x00);            OK
 247            Write_Cmd(0xA2);  //Set Display Offset    OK
 248            Write_Cmd(0x00);            OK
 249            Write_Cmd(0xA4);  //Set Display Mode    OK
 250            Write_Cmd(0xA8);  //Set Multiplex Ratio       OK
 251            Write_Cmd(0x63);  //Multiplex     OK
 252            Write_Cmd(0xAB);  //Set Function SelectionA OK
 253            Write_Cmd(0x01);            OK
 254            Write_Cmd(0xB1);  //Set Phase Length    OK
 255            Write_Cmd(0x47);            OK
 256            Write_Cmd(0xB3);  //Set Display Clock Divide Ratio/Oscillator Frequency OK
 257            Write_Cmd(0x00);            OK
 258            Write_Cmd(0xBC);  //Set Prechange Voltage OK
 259            Write_Cmd(0x07);            OK
 260            Write_Cmd(0xBE);  //Set VCOMH Voltage OK
 261            Write_Cmd(0x07);            OK
 262            Write_Cmd(0xB6);  //Set Second Pre-charge period  OK
 263            Write_Cmd(0x04);                OK
 264            Write_Cmd(0xD5);  //Set Function selection B    OK
 265            Write_Cmd(0x62);                OK
 266            Write_Cmd(0xAF);  //Set Display On
 267          
 268          */
 269          
 270          static const uint8_t u8x8_d_ssd1327_winstar_96x64_init_seq[] = {
 271              
 272            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 273            
 274            U8X8_CA(0x0fd, 0x012),    /* unlock display, usually not required because the display is unlocked after re
             -set */
 275            U8X8_C(0x0ae),                    /* display off */
 276            
 277            U8X8_CA(0x0d9, 0x000),    /* Pre-charge Period ??? */
 278            
 279            U8X8_CA(0x0a0, 0x042),    /* remap configuration */
 280            U8X8_CA(0x0a1, 0x000),    /* display start line */  
 281            U8X8_CA(0x0a2, 0x000),    /* display offset, shift mapping ram counter */
 282            
 283            U8X8_CA(0x0a8, 0x063),    /* multiplex ratio: 63* 1/64 duty */ /* changed to hex, issue 1050 */
 284            
 285            U8X8_CA(0x0ab, 0x001),    /* Enable internal VDD regulator (RESET) */
 286            U8X8_CA(0x081, 0x053),    /* contrast, brightness, 0..128 */
 287            
 288            U8X8_CA(0x0b1, 0x047),                    /* phase length */  
 289            //U8X8_CA(0x0b3, 0x001),    /* set display clock divide ratio/oscillator frequency  */      
 290            U8X8_CA(0x0b3, 0x000),    /* set display clock divide ratio/oscillator frequency  */      
 291            
 292            U8X8_C(0x0b9),        /* use linear lookup table */
 293          
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 6   

 294            U8X8_CA(0x0bc, 0x007),                    /* pre-charge voltage level */
 295            U8X8_CA(0x0be, 0x007),                     /* VCOMH voltage */
 296            U8X8_CA(0x0b6, 0x004),    /* second precharge */
 297            U8X8_CA(0x0d5, 0x062),    /* enable second precharge, internal vsl (bit0 = 0) */
 298            
 299            U8X8_C(0x0a4),        /* normal display mode */
 300              
 301            U8X8_END_TRANSFER(),              /* disable chip */
 302            U8X8_END()                  /* end of sequence */
 303          };
 304          
 305          uint8_t u8x8_d_ssd1327_ws_96x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 306          {
 307   1        if ( u8x8_d_ssd1327_96x96_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 308   1          return 1;
 309   1        if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 310   1        {
 311   2          u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1327_winstar_96x64_display_info);
 312   2          return 1;
 313   2        }
 314   1        else if ( msg == U8X8_MSG_DISPLAY_INIT )
 315   1        {
 316   2          u8x8_d_helper_display_init(u8x8);
 317   2          u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_winstar_96x64_init_seq);    
*** ERROR C208 IN LINE 317 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 318   2          return 1;
 319   2        }
 320   1        else if  ( msg == U8X8_MSG_DISPLAY_SET_FLIP_MODE )
 321   1        {
 322   2          if ( arg_int == 0 )
 323   2          {
 324   3            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_winstar_96x64_flip0_seq);
*** ERROR C208 IN LINE 324 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 325   3            u8x8->x_offset = u8x8->display_info->default_x_offset;
 326   3          }
 327   2          else
 328   2          {
 329   3            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_winstar_96x64_flip1_seq);
*** ERROR C208 IN LINE 329 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 330   3            u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 331   3          }
 332   2          return 1;
 333   2        }
 334   1        return 0;
 335   1      }
 336          
 337          
 338          /*=============================================*/
 339          /*  Seeedstudio Grove OLED 96x96 */
 340          
 341          static const u8x8_display_info_t u8x8_ssd1327_96x96_display_info =
 342          {
 343            /* chip_enable_level = */ 0,
 344            /* chip_disable_level = */ 1,
 345            
 346            /* post_chip_enable_wait_ns = */ 20,
 347            /* pre_chip_disable_wait_ns = */ 10,
 348            /* reset_pulse_width_ms = */ 100,   
 349            /* post_reset_wait_ms = */ 100,     /**/
 350            /* sda_setup_time_ns = */ 100,    /* */
 351            /* sck_pulse_width_ns = */ 100, /*  */
 352            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 7   

             -ck_pulse_width_ns */
 353            /* spi_mode = */ 0,   /* active high, rising edge */
 354            /* i2c_bus_clock_100kHz = */ 1, /* use 1 instead of 4, because the SSD1327 seems to be very slow */
 355            /* data_setup_time_ns = */ 40,
 356            /* write_pulse_width_ns = */ 60,  
 357            /* tile_width = */ 12,
 358            /* tile_hight = */ 12,
 359            /* default_x_offset = */ 16,
 360            /* flipmode_x_offset = */ 16,   
 361            /* pixel_width = */ 96,
 362            /* pixel_height = */ 96
 363          };
 364          
 365          /*  https://github.com/SeeedDocument/Grove_OLED_1.12/raw/master/resources/LY120-096096.pdf */
 366          /*  http://www.seeedstudio.com/wiki/index.php?title=Twig_-_OLED_96x96 */
 367          /* values from u8glib */
 368          /*
 369            Re-map setting in Graphic Display Data RAM, command 0x0a0
 370              Bit 0: Column Address Re-map
 371              Bit 1: Nibble Re-map
 372              Bit 2: Horizontal/Vertical Address Increment
 373              Bit 3: Not used, must be 0
 374              
 375              Bit 4: COM Re-map
 376              Bit 5: Not used, must be 0
 377              Bit 6: COM Split Odd Even
 378              Bit 7: Not used, must be 0
 379          */
 380          
 381          
 382          static const uint8_t u8x8_d_ssd1327_96x96_init_seq[] = {
 383              
 384            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 385            
 386            U8X8_CA(0x0fd, 0x012),    /* unlock display, usually not required because the display is unlocked after re
             -set */
 387            U8X8_C(0x0ae),                    /* display off */
 388            //U8X8_CA(0x0a8, 0x03f),    /* multiplex ratio: 0x03f * 1/64 duty */
 389            U8X8_CA(0x0a8, 0x05f),    /* multiplex ratio: 0x05f * 1/64 duty */
 390            U8X8_CA(0x0a1, 0x000),    /* display start line */
 391            //U8X8_CA(0x0a2, 0x04c),    /* display offset, shift mapping ram counter */
 392            
 393            U8X8_CA(0x0a2, 0x020),    /* display offset, shift mapping ram counter */
 394            U8X8_CA(0x0a0, 0x051),    /* remap configuration */
 395            
 396            
 397            U8X8_CA(0x0ab, 0x001),    /* Enable internal VDD regulator (RESET) */
 398            //U8X8_CA(0x081, 0x070),    /* contrast, brightness, 0..128 */
 399            U8X8_CA(0x081, 0x053),    /* contrast, brightness, 0..128 */
 400            //U8X8_CA(0x0b1, 0x055),                    /* phase length */
 401            U8X8_CA(0x0b1, 0x051),                    /* phase length */  
 402            //U8X8_CA(0x0b3, 0x091),    /* set display clock divide ratio/oscillator frequency (set clock as 135 frame
             -s/sec) */      
 403            U8X8_CA(0x0b3, 0x001),    /* set display clock divide ratio/oscillator frequency  */      
 404            
 405            //? U8X8_CA(0x0ad, 0x002),    /* master configuration: disable embedded DC-DC, enable internal VCOMH */
 406            //? U8X8_C(0x086),        /* full current range (0x084, 0x085, 0x086) */
 407            
 408            U8X8_C(0x0b9),        /* use linear lookup table */
 409          
 410            //U8X8_CA(0x0bc, 0x010),                    /* pre-charge voltage level */
 411            U8X8_CA(0x0bc, 0x008),                    /* pre-charge voltage level */
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 8   

 412            //U8X8_CA(0x0be, 0x01c),                     /* VCOMH voltage */
 413            U8X8_CA(0x0be, 0x007),                     /* VCOMH voltage */
 414            U8X8_CA(0x0b6, 0x001),    /* second precharge */
 415            U8X8_CA(0x0d5, 0x062),    /* enable second precharge, internal vsl (bit0 = 0) */
 416          
 417          
 418            
 419            U8X8_C(0x0a4),        /* normal display mode */
 420              
 421            U8X8_END_TRANSFER(),              /* disable chip */
 422            U8X8_END()                  /* end of sequence */
 423          };
 424          
 425          
 426          
 427          
 428          uint8_t u8x8_d_ssd1327_seeed_96x96(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 429          {
 430   1        if ( u8x8_d_ssd1327_96x96_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 431   1          return 1;
 432   1        if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 433   1        {
 434   2          u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1327_96x96_display_info);
 435   2          return 1;
 436   2        }
 437   1        else if ( msg == U8X8_MSG_DISPLAY_INIT )
 438   1        {
 439   2          u8x8_d_helper_display_init(u8x8);
 440   2          u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_96x96_init_seq);    
*** ERROR C208 IN LINE 440 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 441   2          return 1;
 442   2        }
 443   1        else if  ( msg == U8X8_MSG_DISPLAY_SET_FLIP_MODE )
 444   1        {
 445   2          if ( arg_int == 0 )
 446   2          {
 447   3            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_seeed_96x96_flip0_seq);
*** ERROR C208 IN LINE 447 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 448   3            u8x8->x_offset = u8x8->display_info->default_x_offset;
 449   3          }
 450   2          else
 451   2          {
 452   3            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_seeed_96x96_flip1_seq);
*** ERROR C208 IN LINE 452 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 453   3            u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 454   3          }
 455   2          return 1;
 456   2        }
 457   1        return 0;
 458   1      }
 459          
 460          /*=============================================*/
 461          /*  EA W128128 round OLED 128x128 */
 462          /* issue #641 */
 463          /* https://www.lcd-module.de/fileadmin/eng/pdf/grafik/W128128-XR.pdf */
 464          
 465          static const u8x8_display_info_t u8x8_ssd1327_ea_w128128_display_info =
 466          {
 467            /* chip_enable_level = */ 0,
 468            /* chip_disable_level = */ 1,
 469            
 470            /* post_chip_enable_wait_ns = */ 20,
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 9   

 471            /* pre_chip_disable_wait_ns = */ 10,
 472            /* reset_pulse_width_ms = */ 100,   
 473            /* post_reset_wait_ms = */ 100,     /**/
 474            /* sda_setup_time_ns = */ 100,    /* */
 475            /* sck_pulse_width_ns = */ 100, /*  */
 476            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 477            /* spi_mode = */ 0,   /* active high, rising edge */
 478            /* i2c_bus_clock_100kHz = */ 1, /* use 1 instead of 4, because the SSD1327 seems to be very slow */
 479            /* data_setup_time_ns = */ 40,
 480            /* write_pulse_width_ns = */ 60,  
 481            /* tile_width = */ 16,
 482            /* tile_hight = */ 16,
 483            /* default_x_offset = */ 0,
 484            /* flipmode_x_offset = */ 0,    
 485            /* pixel_width = */ 128,
 486            /* pixel_height = */ 128
 487          };
 488          
 489          /* this is a copy of the init sequence for the seeed 96x96 oled */
 490          static const uint8_t u8x8_d_ssd1327_ea_w128128_init_seq[] = {
 491              
 492            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 493            
 494            U8X8_CA(0x0fd, 0x012),    /* unlock display, usually not required because the display is unlocked after re
             -set */
 495            U8X8_C(0x0ae),                    /* display off */
 496            //U8X8_CA(0x0a8, 0x03f),    /* multiplex ratio: 0x03f * 1/64 duty */
 497            U8X8_CA(0x0a8, 0x05f),    /* multiplex ratio: 0x05f * 1/64 duty */
 498            U8X8_CA(0x0a1, 0x000),    /* display start line */
 499            //U8X8_CA(0x0a2, 0x04c),    /* display offset, shift mapping ram counter */
 500            
 501            U8X8_CA(0x0a2, 0x010),    /* display offset, shift mapping ram counter */
 502            U8X8_CA(0x0a0, 0x051),    /* remap configuration */
 503            
 504            
 505            U8X8_CA(0x0ab, 0x001),    /* Enable internal VDD regulator (RESET) */
 506            //U8X8_CA(0x081, 0x070),    /* contrast, brightness, 0..128 */
 507            U8X8_CA(0x081, 0x053),    /* contrast, brightness, 0..128 */
 508            //U8X8_CA(0x0b1, 0x055),                    /* phase length */
 509            U8X8_CA(0x0b1, 0x051),                    /* phase length */  
 510            //U8X8_CA(0x0b3, 0x091),    /* set display clock divide ratio/oscillator frequency (set clock as 135 frame
             -s/sec) */      
 511            U8X8_CA(0x0b3, 0x001),    /* set display clock divide ratio/oscillator frequency  */      
 512            
 513            //? U8X8_CA(0x0ad, 0x002),    /* master configuration: disable embedded DC-DC, enable internal VCOMH */
 514            //? U8X8_C(0x086),        /* full current range (0x084, 0x085, 0x086) */
 515            
 516            U8X8_C(0x0b9),        /* use linear lookup table */
 517          
 518            //U8X8_CA(0x0bc, 0x010),                    /* pre-charge voltage level */
 519            U8X8_CA(0x0bc, 0x008),                    /* pre-charge voltage level */
 520            //U8X8_CA(0x0be, 0x01c),                     /* VCOMH voltage */
 521            U8X8_CA(0x0be, 0x007),                     /* VCOMH voltage */
 522            U8X8_CA(0x0b6, 0x001),    /* second precharge */
 523            U8X8_CA(0x0d5, 0x062),    /* enable second precharge, internal vsl (bit0 = 0) */
 524            
 525            U8X8_C(0x0a4),        /* normal display mode */
 526              
 527            U8X8_END_TRANSFER(),              /* disable chip */
 528            U8X8_END()                  /* end of sequence */
 529          };
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 10  

 530          
 531          
 532          
 533          static const uint8_t u8x8_d_ssd1327_ea_w128128_flip0_seq[] = {
 534            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 535            U8X8_CA(0x0a2, 0x000),    /* display offset, shift mapping ram counter */
 536            U8X8_CA(0x0a0, 0x051),    /* remap configuration */
 537            U8X8_END_TRANSFER(),              /* disable chip */
 538            U8X8_END()                  /* end of sequence */
 539          };
 540          
 541          static const uint8_t u8x8_d_ssd1327_ea_w128128_flip1_seq[] = {
 542            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 543            U8X8_CA(0x0a2, 0x000),    /* display offset, shift mapping ram counter */
 544            U8X8_CA(0x0a0, 0x042),    /* remap configuration */
 545            U8X8_END_TRANSFER(),              /* disable chip */
 546            U8X8_END()                  /* end of sequence */
 547          };
 548          
 549          uint8_t u8x8_d_ssd1327_ea_w128128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 550          {
 551   1        if ( u8x8_d_ssd1327_96x96_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 552   1          return 1;
 553   1        if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 554   1        {
 555   2          u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1327_ea_w128128_display_info);
 556   2          return 1;
 557   2        }
 558   1        else if ( msg == U8X8_MSG_DISPLAY_INIT )
 559   1        {
 560   2          u8x8_d_helper_display_init(u8x8);
 561   2          u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_ea_w128128_init_seq);    
*** ERROR C208 IN LINE 561 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 562   2          return 1;
 563   2        }
 564   1        else if  ( msg == U8X8_MSG_DISPLAY_SET_FLIP_MODE )
 565   1        {
 566   2          if ( arg_int == 0 )
 567   2          {
 568   3            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_ea_w128128_flip0_seq);
*** ERROR C208 IN LINE 568 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 569   3            u8x8->x_offset = u8x8->display_info->default_x_offset;
 570   3          }
 571   2          else
 572   2          {
 573   3            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_ea_w128128_flip1_seq);
*** ERROR C208 IN LINE 573 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 574   3            u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 575   3          }
 576   2          return 1;
 577   2        }
 578   1        return 0;
 579   1      }
 580          
 581          /*=============================================*/
 582          /*  MIDAS MCOT128128C1V-YM 128x128 Module */
 583          
 584          
 585          static const u8x8_display_info_t u8x8_ssd1327_128x128_display_info =
 586          {
 587            /* chip_enable_level = */ 0,
 588            /* chip_disable_level = */ 1,
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 11  

 589            
 590            /* post_chip_enable_wait_ns = */ 20,
 591            /* pre_chip_disable_wait_ns = */ 10,
 592            /* reset_pulse_width_ms = */ 100,   
 593            /* post_reset_wait_ms = */ 100,     /**/
 594            /* sda_setup_time_ns = */ 100,    /* */
 595            /* sck_pulse_width_ns = */ 100, /*  */
 596            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 597            /* spi_mode = */ 0,   /* active high, rising edge */
 598            /* i2c_bus_clock_100kHz = */ 1, /* use 1 instead of 4, because the SSD1327 seems to be very slow, Update
             - 9 Aug 2019: The OLED from aliexpress supports 400kHz */
 599            /* data_setup_time_ns = */ 40,
 600            /* write_pulse_width_ns = */ 60,  
 601            /* tile_width = */ 16,
 602            /* tile_hight = */ 16,
 603            /* default_x_offset = */ 0,
 604            /* flipmode_x_offset = */ 0,    
 605            /* pixel_width = */ 128,
 606            /* pixel_height = */ 128
 607          };
 608          
 609          /*  https://github.com/SeeedDocument/Grove_OLED_1.12/raw/master/resources/LY120-096096.pdf */
 610          /*  http://www.seeedstudio.com/wiki/index.php?title=Twig_-_OLED_96x96 */
 611          /* values from u8glib */
 612          /*
 613            Re-map setting in Graphic Display Data RAM, command 0x0a0
 614              Bit 0: Column Address Re-map
 615              Bit 1: Nibble Re-map
 616              Bit 2: Horizontal/Vertical Address Increment
 617              Bit 3: Not used, must be 0
 618              
 619              Bit 4: COM Re-map
 620              Bit 5: Not used, must be 0
 621              Bit 6: COM Split Odd Even
 622              Bit 7: Not used, must be 0
 623          */
 624          
 625          
 626          static const uint8_t u8x8_d_ssd1327_128x128_init_seq[] = {
 627              
 628            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 629          
 630            
 631            U8X8_CA(0x0fd, 0x012),    /* unlock display, usually not required because the display is unlocked after re
             -set */
 632            U8X8_C(0x0ae),                    /* display off */
 633            //U8X8_CA(0x0a8, 0x03f),    /* multiplex ratio: 0x03f * 1/64 duty */
 634            //U8X8_CA(0x0a8, 0x05f),    /* multiplex ratio: 0x05f * 1/64 duty */
 635            U8X8_CA(0x0a8, 0x07f),           /* multiplex ratio: 0x05f * 1/128duty */
 636            U8X8_CA(0x0a1, 0x000),    /* display start line */
 637            //U8X8_CA(0x0a2, 0x04c),    /* display offset, shift mapping ram counter */
 638            
 639            U8X8_CA(0x0a2, 0x000),    /* display offset, shift mapping ram counter */
 640            U8X8_CA(0x0a0, 0x051),    /* remap configuration */
 641            
 642            
 643            U8X8_CA(0x0ab, 0x001),    /* Enable internal VDD regulator (RESET) */
 644            //U8X8_CA(0x081, 0x070),    /* contrast, brightness, 0..128 */
 645            U8X8_CA(0x081, 0x053),    /* contrast, brightness, 0..128 */
 646            //U8X8_CA(0x0b1, 0x055),                    /* phase length */
 647            U8X8_CA(0x0b1, 0x051),                    /* phase length */  
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 12  

 648            //U8X8_CA(0x0b3, 0x091),    /* set display clock divide ratio/oscillator frequency (set clock as 135 frame
             -s/sec) */      
 649            U8X8_CA(0x0b3, 0x001),    /* set display clock divide ratio/oscillator frequency  */      
 650            
 651            //? U8X8_CA(0x0ad, 0x002),    /* master configuration: disable embedded DC-DC, enable internal VCOMH */
 652            //? U8X8_C(0x086),        /* full current range (0x084, 0x085, 0x086) */
 653            
 654            U8X8_C(0x0b9),        /* use linear lookup table */
 655          
 656            //U8X8_CA(0x0bc, 0x010),                    /* pre-charge voltage level */
 657            U8X8_CA(0x0bc, 0x008),                    /* pre-charge voltage level */
 658            //U8X8_CA(0x0be, 0x01c),                     /* VCOMH voltage */
 659            U8X8_CA(0x0be, 0x007),                     /* VCOMH voltage */
 660            U8X8_CA(0x0b6, 0x001),    /* second precharge */
 661            U8X8_CA(0x0d5, 0x062),    /* enable second precharge, internal vsl (bit0 = 0) */
 662          
 663          
 664            
 665            U8X8_C(0x0a4),        /* normal display mode */
 666              
 667            U8X8_END_TRANSFER(),              /* disable chip */
 668            U8X8_END()                  /* end of sequence */
 669          };
 670          
 671          
 672          static const uint8_t u8x8_d_ssd1327_128x128_flip0_seq[] = {
 673            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 674            U8X8_CA(0x0a2, 0x000),    /* display offset, shift mapping ram counter */
 675            U8X8_CA(0x0a0, 0x051),    /* remap configuration */
 676            U8X8_END_TRANSFER(),              /* disable chip */
 677            U8X8_END()                  /* end of sequence */
 678          };
 679          
 680          static const uint8_t u8x8_d_ssd1327_128x128_flip1_seq[] = {
 681            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 682            U8X8_CA(0x0a2, 0x000),    /* display offset, shift mapping ram counter */
 683            U8X8_CA(0x0a0, 0x042),    /* remap configuration */
 684            U8X8_END_TRANSFER(),              /* disable chip */
 685            U8X8_END()                  /* end of sequence */
 686          };
 687          
 688          
 689          uint8_t u8x8_d_ssd1327_midas_128x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 690          {
 691   1        /* call the 96x96 procedure at the moment */
 692   1        if ( u8x8_d_ssd1327_96x96_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 693   1          return 1;
 694   1        if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 695   1        {
 696   2          u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1327_128x128_display_info);
 697   2          return 1;
 698   2        }
 699   1        else if ( msg == U8X8_MSG_DISPLAY_INIT )
 700   1        {
 701   2          u8x8_d_helper_display_init(u8x8);
 702   2          u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_128x128_init_seq); 
*** ERROR C208 IN LINE 702 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 703   2          return 1;
 704   2        }
 705   1        else if  ( msg == U8X8_MSG_DISPLAY_SET_FLIP_MODE )
 706   1        {
 707   2          if ( arg_int == 0 )
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 13  

 708   2          {
 709   3            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_128x128_flip0_seq);
*** ERROR C208 IN LINE 709 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 710   3            u8x8->x_offset = u8x8->display_info->default_x_offset;
 711   3          }
 712   2          else
 713   2          {
 714   3            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_128x128_flip1_seq);
*** ERROR C208 IN LINE 714 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 715   3            u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 716   3          }
 717   2          return 1;
 718   2        }
 719   1        return 0;
 720   1      }
 721          
 722          
 723          /*=============================================*/
 724          /*  
 725            Waveshare 128x128 Module 
 726            https://www.waveshare.com/w/upload/8/80/1.5inch_OLED_Module_User_Manual_EN.pdf
 727            https://github.com/olikraus/u8g2/issues/880
 728          
 729            This is mostly a takeover of the EA display.
 730          */
 731          
 732          /*  https://github.com/SeeedDocument/Grove_OLED_1.12/raw/master/resources/LY120-096096.pdf */
 733          /*  http://www.seeedstudio.com/wiki/index.php?title=Twig_-_OLED_96x96 */
 734          /* values from u8glib */
 735          /*
 736            Re-map setting in Graphic Display Data RAM, command 0x0a0
 737              Bit 0: Column Address Re-map
 738              Bit 1: Nibble Re-map
 739              Bit 2: Horizontal/Vertical Address Increment
 740              Bit 3: Not used, must be 0
 741              
 742              Bit 4: COM Re-map
 743              Bit 5: Not used, must be 0
 744              Bit 6: COM Split Odd Even
 745              Bit 7: Not used, must be 0
 746          */
 747          
 748          /* takeover from https://github.com/olikraus/u8g2/issues/880 */
 749          static const uint8_t u8x8_d_ssd1327_ws_128x128_init_seq[] = {
 750              
 751              U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 752          
 753              U8X8_C(0x0ae), //--turn off oled panel
 754              U8X8_CAA(0x015, 0x000, 0x07f),    //set column address, start column 0, end column 127
 755              U8X8_CAA(0x075, 0x000, 0x07f),    //set row address, start row 0, end row 127
 756              U8X8_CA(0x081, 0x080),    //set contrast control
 757              U8X8_CA(0x0a0, 0x051),    //gment remap, 51
 758              U8X8_CA(0x0a1, 0x000),    //start line
 759              U8X8_CA(0x0a2, 0x000),    //display offset
 760              U8X8_CAA(0x0a4, 0x0a8, 0x07f),    //rmal display, set multiplex ratio
 761              U8X8_CA(0x0b1, 0x0f1),    //set phase leghth
 762              U8X8_CA(0x0b3, 0x000),    //set dclk, 80Hz:0xc1 90Hz:0xe1   100Hz:0x00   110Hz:0x30 120Hz:0x50   130Hz
             -:0x70     01
 763              U8X8_CA(0x0ab, 0x001),    //
 764              U8X8_CA(0x0b6, 0x00f),    //set phase leghth
 765              U8X8_CA(0x0be, 0x00f),
 766              U8X8_CA(0x0bc, 0x008),
C51 COMPILER V9.01   U8X8_D_SSD1327                                                        04/30/2021 10:55:29 PAGE 14  

 767              U8X8_CA(0x0d5, 0x062),
 768              U8X8_CA(0x0fd, 0x012),
 769          
 770              U8X8_END_TRANSFER(),              /* disable chip */
 771              U8X8_END()                  /* end of sequence */
 772            };
 773          
 774          
 775          uint8_t u8x8_d_ssd1327_ws_128x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 776          {
 777   1        /* call the 96x96 procedure at the moment */
 778   1        if ( u8x8_d_ssd1327_96x96_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 779   1          return 1;
 780   1        if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 781   1        {
 782   2          u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1327_ea_w128128_display_info);
 783   2          return 1;
 784   2        }
 785   1        else if ( msg == U8X8_MSG_DISPLAY_INIT )
 786   1        {
 787   2          u8x8_d_helper_display_init(u8x8);
 788   2          u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_ws_128x128_init_seq); 
*** ERROR C208 IN LINE 788 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 789   2          return 1;
 790   2        }
 791   1        else if  ( msg == U8X8_MSG_DISPLAY_SET_FLIP_MODE )
 792   1        {
 793   2          if ( arg_int == 0 )
 794   2          {
 795   3            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_ea_w128128_flip0_seq);
*** ERROR C208 IN LINE 795 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 796   3            u8x8->x_offset = u8x8->display_info->default_x_offset;
 797   3          }
 798   2          else
 799   2          {
 800   3            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_ea_w128128_flip1_seq);
*** ERROR C208 IN LINE 800 OF ..\U8G2\CSRC\U8X8_D_SSD1327.C: '_u8x8_cad_SendSequence': too many actual parameters
 801   3            u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 802   3          }
 803   2          return 1;
 804   2        }
 805   1        return 0;
 806   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  21 ERROR(S)
