C51 COMPILER V9.01   U8X8_D_PCD8544_84X48                                                  04/30/2021 10:55:24 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE U8X8_D_PCD8544_84X48
OBJECT MODULE PLACED IN .\Objects\u8x8_d_pcd8544_84x48.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\csrc\u8x8_d_pcd8544_84x48.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,SPE
                    -ED) BROWSE INCDIR(..\USER;..\SYS;..\BSP\BSP_485;..\BSP\BSP_ADC;..\BSP\BSP_KEY;..\BSP\BSP_OLED_IIC;..\APP) DEBUG OBJECTEX
                    -TEND PRINT(.\Listings\u8x8_d_pcd8544_84x48.lst) TABS(2) OBJECT(.\Objects\u8x8_d_pcd8544_84x48.obj)

line level    source

   1          /*
   2          
   3            u8x8_d_pcd8544_84x48.c (so called "Nokia 5110" displays)
   4            
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2016, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33          
  34            
  35          */
  36          #include "u8x8.h"
*** ERROR C141 IN LINE 600 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 632 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 663 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
  37          
  38          
  39          
  40          
  41          static const uint8_t u8x8_d_pcd8544_84x48_init_seq[] = {
  42              
  43            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  44            
  45            U8X8_C(0x021),                  /* activate chip (PD=0), horizontal increment (V=0), enter extended command
             - set (H=1) */
  46            U8X8_C(0x006),                    /* temp. control: b10 = 2  */
  47            U8X8_C(0x013),                    /* bias system 1:48 */
  48            U8X8_C(0x0c0),                    /* medium Vop  */
  49            
C51 COMPILER V9.01   U8X8_D_PCD8544_84X48                                                  04/30/2021 10:55:24 PAGE 2   

  50            U8X8_C(0x020),                    /* activate chip (PD=0), horizontal increment (V=0), enter normal comman
             -d set (H=0) */
  51            U8X8_C(0x008),        /* blank */
  52            U8X8_C(0x024),                    /* power down (PD=1), horizontal increment (V=0), enter normal command s
             -et (H=0) */
  53              
  54            U8X8_END_TRANSFER(),              /* disable chip */
  55            U8X8_END()                  /* end of sequence */
  56          };
  57          
  58          static const uint8_t u8x8_d_pcd8544_84x48_powersave0_seq[] = {
  59            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  60            U8X8_C(0x020),                    /* activate chip (PD=0), horizontal increment (V=0), enter normal comman
             -d set (H=0) */
  61            U8X8_C(0x00c),        /* display on */
  62            U8X8_END_TRANSFER(),              /* disable chip */
  63            U8X8_END()                  /* end of sequence */
  64          };
  65          
  66          static const uint8_t u8x8_d_pcd8544_84x48_powersave1_seq[] = {
  67            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  68            U8X8_C(0x020),                    /* activate chip (PD=0), horizontal increment (V=0), enter normal comman
             -d set (H=0) */
  69            U8X8_C(0x008),        /* blank */
  70            U8X8_C(0x024),                    /* power down (PD=1), horizontal increment (V=0), enter normal command s
             -et (H=0) */
  71            U8X8_END_TRANSFER(),              /* disable chip */
  72            U8X8_END()                  /* end of sequence */
  73          };
  74          
  75          
  76          
  77          static const u8x8_display_info_t u8x8_pcd8544_84x48_display_info =
  78          {
  79            /* chip_enable_level = */ 0,
  80            /* chip_disable_level = */ 1,
  81            
  82            /* post_chip_enable_wait_ns = */ 5,
  83            /* pre_chip_disable_wait_ns = */ 5,
  84            /* reset_pulse_width_ms = */ 2, 
  85            /* post_reset_wait_ms = */ 2, 
  86            /* sda_setup_time_ns = */ 12,   
  87            /* sck_pulse_width_ns = */ 75,  /* half of cycle time (100ns according to datasheet), AVR: below 70: 8 MH
             -z, >= 70 --> 4MHz clock */
  88            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
  89            /* spi_mode = */ 0,   /* active high, rising edge */
  90            /* i2c_bus_clock_100kHz = */ 4,
  91            /* data_setup_time_ns = */ 30,
  92            /* write_pulse_width_ns = */ 40,
  93            /* tile_width = */ 11,    /* width of 11*8=88 pixel */
  94            /* tile_hight = */ 6,
  95            /* default_x_offset = */ 0,
  96            /* flipmode_x_offset = */ 0,
  97            /* pixel_width = */ 84,
  98            /* pixel_height = */ 48
  99          };
 100          
 101          uint8_t u8x8_d_pcd8544_84x48(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 102          {
 103   1        uint8_t x, c;
 104   1        uint8_t *ptr;
C51 COMPILER V9.01   U8X8_D_PCD8544_84X48                                                  04/30/2021 10:55:24 PAGE 3   

 105   1        switch(msg)
 106   1        {
 107   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 108   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_pcd8544_84x48_display_info);
 109   2            break;
 110   2          case U8X8_MSG_DISPLAY_INIT:
 111   2            u8x8_d_helper_display_init(u8x8);
 112   2            u8x8_cad_SendSequence(u8x8, u8x8_d_pcd8544_84x48_init_seq);
*** ERROR C208 IN LINE 112 OF ..\U8G2\CSRC\U8X8_D_PCD8544_84X48.C: '_u8x8_cad_SendSequence': too many actual parameters
 113   2            break;
 114   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 115   2            if ( arg_int == 0 )
 116   2        u8x8_cad_SendSequence(u8x8, u8x8_d_pcd8544_84x48_powersave0_seq);
*** ERROR C208 IN LINE 116 OF ..\U8G2\CSRC\U8X8_D_PCD8544_84X48.C: '_u8x8_cad_SendSequence': too many actual parameters
 117   2            else
 118   2        u8x8_cad_SendSequence(u8x8, u8x8_d_pcd8544_84x48_powersave1_seq);
*** ERROR C208 IN LINE 118 OF ..\U8G2\CSRC\U8X8_D_PCD8544_84X48.C: '_u8x8_cad_SendSequence': too many actual parameters
 119   2            break;
 120   2          // case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 121   2          //    break;  NOT SUPPORTED
 122   2            
 123   2      #ifdef U8X8_WITH_SET_CONTRAST
 124   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 125   2            u8x8_cad_StartTransfer(u8x8);
 126   2            u8x8_cad_SendCmd(u8x8, 0x021 ); /* command mode, extended function set */
 127   2            u8x8_cad_SendCmd(u8x8, 0x080 | (arg_int >> 1) );
 128   2            u8x8_cad_EndTransfer(u8x8);
 129   2            break;
 130   2      #endif
 131   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
 132   2            u8x8_cad_StartTransfer(u8x8);
 133   2          
 134   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 135   2            x *= 8;
 136   2            x += u8x8->x_offset;
 137   2            u8x8_cad_SendCmd(u8x8, 0x020 ); /* activate chip (PD=0), horizontal increment (V=0), enter normal co
             -mmand set (H=0) */
 138   2            u8x8_cad_SendCmd(u8x8, 0x080 | (x) ); /* set X address */
 139   2            u8x8_cad_SendCmd(u8x8, 0x040 | (((u8x8_tile_t *)arg_ptr)->y_pos) ); /* set Y address */
 140   2          
 141   2            ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 142   2            c = ((u8x8_tile_t *)arg_ptr)->cnt;
 143   2            c *= 8; 
 144   2            do
 145   2            {
 146   3        if ( c + x > 84u )
 147   3        {
 148   4          if ( x >= 84u )
 149   4            break;
 150   4          c = 84u;
 151   4          c -= x;
 152   4        }
 153   3        u8x8_cad_SendData(u8x8, c, ptr);  /* note: SendData can not handle more than 255 bytes */
*** ERROR C208 IN LINE 153 OF ..\U8G2\CSRC\U8X8_D_PCD8544_84X48.C: '_u8x8_cad_SendData': too many actual parameters
 154   3        x += c;
 155   3        arg_int--;
 156   3            } while( arg_int > 0 );
 157   2            
 158   2            u8x8_cad_EndTransfer(u8x8);
 159   2            break;
 160   2          default:
 161   2            return 0;
C51 COMPILER V9.01   U8X8_D_PCD8544_84X48                                                  04/30/2021 10:55:24 PAGE 4   

 162   2        }
 163   1        return 1;
 164   1      }
 165          
 166          

C51 COMPILATION COMPLETE.  0 WARNING(S),  7 ERROR(S)
