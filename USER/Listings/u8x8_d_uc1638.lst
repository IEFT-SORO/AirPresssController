C51 COMPILER V9.01   U8X8_D_UC1638                                                         04/30/2021 10:55:33 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE U8X8_D_UC1638
OBJECT MODULE PLACED IN .\Objects\u8x8_d_uc1638.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\csrc\u8x8_d_uc1638.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,SPEED) BRO
                    -WSE INCDIR(..\USER;..\SYS;..\BSP\BSP_485;..\BSP\BSP_ADC;..\BSP\BSP_KEY;..\BSP\BSP_OLED_IIC;..\APP) DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\u8x8_d_uc1638.lst) TABS(2) OBJECT(.\Objects\u8x8_d_uc1638.obj)

line level    source

   1          /*
   2          
   3            u8x8_d_uc1638.c
   4            
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2016, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33          
  34          
  35            
  36          */
  37          #include "u8x8.h"
*** ERROR C141 IN LINE 600 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 632 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 663 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
  38          
  39          
  40          
  41          
  42          
  43          static const uint8_t u8x8_d_uc1638_powersave0_seq[] = {
  44            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  45            U8X8_CA(0x0c9, 0x0ad),                    /* display on */   /* UC1638 B/W mode */
  46            U8X8_END_TRANSFER(),              /* disable chip */
  47            U8X8_END()                  /* end of sequence */
  48          };
  49          
  50          static const uint8_t u8x8_d_uc1638_powersave1_seq[] = {
C51 COMPILER V9.01   U8X8_D_UC1638                                                         04/30/2021 10:55:33 PAGE 2   

  51            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  52            U8X8_CA(0x0c9, 0x0ac),                    /* display off */   /* UC1638 */
  53            U8X8_END_TRANSFER(),              /* disable chip */
  54            U8X8_END()                  /* end of sequence */
  55          };
  56          
  57          static const uint8_t u8x8_d_uc1638_flip0_seq[] = {
  58            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  59            U8X8_C(0x0c4),              /* LCD Mapping */    /* UC1638*/
  60            U8X8_END_TRANSFER(),              /* disable chip */
  61            U8X8_END()                  /* end of sequence */
  62          };
  63          
  64          static const uint8_t u8x8_d_uc1638_flip1_seq[] = {
  65            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  66            U8X8_C(0x0c2),              /* LCD Mapping */    /* UC1638*/
  67            U8X8_END_TRANSFER(),              /* disable chip */
  68            U8X8_END()                  /* end of sequence */
  69          };
  70          
  71          
  72          uint8_t u8x8_d_uc1638_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  73          {
  74   1        uint8_t x, y, c;
  75   1        uint8_t *ptr;
  76   1        switch(msg)
  77   1        {
  78   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
  79   2            u8x8_cad_StartTransfer(u8x8);
  80   2          
  81   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;
  82   2            x *= 8;
  83   2      
  84   2            u8x8_cad_SendCmd(u8x8, 0x004);  /* UC1638 */
  85   2            u8x8_cad_SendArg(u8x8, x);
  86   2          
  87   2            y = ((u8x8_tile_t *)arg_ptr)->y_pos;
  88   2            y += u8x8->x_offset;
  89   2            y *= 2;   /* for B/W mode, use only every second page */
  90   2      
  91   2            u8x8_cad_SendCmd(u8x8, 0x060 | (y&15));  /* UC1638 */
  92   2            u8x8_cad_SendCmd(u8x8, 0x070 | (y>>4));  /* UC1638 */
  93   2          
  94   2          
  95   2            u8x8_cad_SendCmd(u8x8, 0x001); /* UC1638 */
  96   2            c = ((u8x8_tile_t *)arg_ptr)->cnt;
  97   2            c *= 8;
  98   2            ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
  99   2            do
 100   2            {
 101   3        u8x8_cad_SendData(u8x8, c, ptr);  /* note: SendData can not handle more than 255 bytes */
*** ERROR C208 IN LINE 101 OF ..\U8G2\CSRC\U8X8_D_UC1638.C: '_u8x8_cad_SendData': too many actual parameters
 102   3        arg_int--;
 103   3            } while( arg_int > 0 );
 104   2            
 105   2            u8x8_cad_EndTransfer(u8x8);
 106   2            break;
 107   2          /*  handled in the calling procedure 
 108   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 109   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1638_128x64_display_info);
 110   2            break;
 111   2          case U8X8_MSG_DISPLAY_INIT:
C51 COMPILER V9.01   U8X8_D_UC1638                                                         04/30/2021 10:55:33 PAGE 3   

 112   2            u8x8_d_helper_display_init(u8x8);
 113   2            u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
 114   2            break;
 115   2          */
 116   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 117   2            if ( arg_int == 0 )
 118   2        u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave0_seq);
*** ERROR C208 IN LINE 118 OF ..\U8G2\CSRC\U8X8_D_UC1638.C: '_u8x8_cad_SendSequence': too many actual parameters
 119   2            else
 120   2        u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
*** ERROR C208 IN LINE 120 OF ..\U8G2\CSRC\U8X8_D_UC1638.C: '_u8x8_cad_SendSequence': too many actual parameters
 121   2            break;
 122   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 123   2            if ( arg_int == 0 )
 124   2            {
 125   3        u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip0_seq);
*** ERROR C208 IN LINE 125 OF ..\U8G2\CSRC\U8X8_D_UC1638.C: '_u8x8_cad_SendSequence': too many actual parameters
 126   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
 127   3            }
 128   2            else
 129   2            {
 130   3        u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
*** ERROR C208 IN LINE 130 OF ..\U8G2\CSRC\U8X8_D_UC1638.C: '_u8x8_cad_SendSequence': too many actual parameters
 131   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 132   3            } 
 133   2            break;
 134   2      #ifdef U8X8_WITH_SET_CONTRAST
 135   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 136   2            u8x8_cad_StartTransfer(u8x8);
 137   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 138   2            u8x8_cad_SendArg(u8x8, arg_int  );  /* uc1638 has range from 0 to 255 */
 139   2            u8x8_cad_EndTransfer(u8x8);
 140   2            break;
 141   2      #endif
 142   2          default:
 143   2            return 0;
 144   2        }
 145   1        return 1;
 146   1      }
 147          
 148          
 149          /*================================================*/
 150          /* uc1638 160x128 */
 151          
 152          /* values taken from uc1608 */
 153          static const u8x8_display_info_t u8x8_uc1638_160x128_display_info =
 154          {
 155            /* chip_enable_level = */ 1,  /* uc1638 has high active CS */
 156            /* chip_disable_level = */ 0,
 157            
 158            /* post_chip_enable_wait_ns = */ 10,  /* */
 159            /* pre_chip_disable_wait_ns = */ 20,  /* */
 160            /* reset_pulse_width_ms = */ 5,   /* */
 161            /* post_reset_wait_ms = */ 150,   
 162            /* sda_setup_time_ns = */ 30,   /* */
 163            /* sck_pulse_width_ns = */ 65,  /* */
 164            /* sck_clock_hz = */ 1000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 165            /* spi_mode = */ 3,   /* active high, rising edge */
 166            /* i2c_bus_clock_100kHz = */ 4,
 167            /* data_setup_time_ns = */ 30,  /*  */
 168            /* write_pulse_width_ns = */ 35,  /*  */
C51 COMPILER V9.01   U8X8_D_UC1638                                                         04/30/2021 10:55:33 PAGE 4   

 169            /* tile_width = */ 20,    /* width of 20*8=160 pixel */
 170            /* tile_hight = */ 16,
 171            /* default_x_offset = */ 0, /*  */
 172            /* flipmode_x_offset = */ 0,  /* */
 173            /* pixel_width = */ 160,
 174            /* pixel_height = */ 128
 175          };
 176          
 177          static const uint8_t u8x8_d_uc1638_160x128_init_seq[] = {
 178              
 179            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 180          
 181            U8X8_CA(0x0e1, 0x0e2),    /* software reset */    /* UC1638*/
 182            U8X8_DLY(5),          /* 5 ms */  
 183          
 184            U8X8_C(0x024),                /*   set temp comp*/
 185            U8X8_C(0x0c0),                /*  mirror y and mirror x */  /* WAS: c2 */
 186            U8X8_C(0x0a2),                /*  line rate */
 187            U8X8_C(0x0d6),                /*  gray scale 2 */
 188            U8X8_C(0x0eb),                /*   set bias*/
 189            U8X8_C(0x095),                /*   set 1 bit per pixel, pattern 0*/
 190            U8X8_C(0x089),                /*   set auto increment, low bits are AC2 AC1 AC0 */  /* WAS 89 */
 191          
 192          
 193            U8X8_CA(0x081, 0x0a0),    /* set contrast */    /* UC1638*/
 194            
 195            
 196            U8X8_END_TRANSFER(),              /* disable chip */
 197            U8X8_END()                  /* end of sequence */
 198          };
 199          
 200          uint8_t u8x8_d_uc1638_160x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 201          {
 202   1        /* call common procedure first and handle messages there */
 203   1        if ( u8x8_d_uc1638_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 204   1        {
 205   2          /* msg not handled, then try here */
 206   2          switch(msg)
 207   2          {
 208   3            case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 209   3        u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1638_160x128_display_info);
 210   3        break;
 211   3            case U8X8_MSG_DISPLAY_INIT:
 212   3        u8x8_d_helper_display_init(u8x8);
 213   3        u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_160x128_init_seq);
*** ERROR C208 IN LINE 213 OF ..\U8G2\CSRC\U8X8_D_UC1638.C: '_u8x8_cad_SendSequence': too many actual parameters
 214   3        break;
 215   3            default:
 216   3        return 0;   /* msg unknown */
 217   3          }
 218   2        }
 219   1        return 1;
 220   1      }
 221          
 222          
 223          /*================================================*/

C51 COMPILATION COMPLETE.  0 WARNING(S),  9 ERROR(S)
