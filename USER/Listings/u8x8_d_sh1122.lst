C51 COMPILER V9.01   U8X8_D_SH1122                                                         04/30/2021 10:55:26 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE U8X8_D_SH1122
OBJECT MODULE PLACED IN .\Objects\u8x8_d_sh1122.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\csrc\u8x8_d_sh1122.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,SPEED) BRO
                    -WSE INCDIR(..\USER;..\SYS;..\BSP\BSP_485;..\BSP\BSP_ADC;..\BSP\BSP_KEY;..\BSP\BSP_OLED_IIC;..\APP) DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\u8x8_d_sh1122.lst) TABS(2) OBJECT(.\Objects\u8x8_d_sh1122.obj)

line level    source

   1          /*
   2          
   3            u8x8_d_sh1122.c
   4            
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2016, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33          
  34          
  35            Copied from sh1122 mostly because of the similar RAM architecture.
  36            However: Commands are very different!
  37            
  38          */
  39          #include "u8x8.h"
*** ERROR C141 IN LINE 600 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 632 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 663 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
  40          
  41          
  42          
  43          
  44          static const uint8_t u8x8_d_sh1122_powersave0_seq[] = {
  45            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  46            U8X8_C(0x0af),                    /* sh1122: display on */
  47            U8X8_END_TRANSFER(),              /* disable chip */
  48            U8X8_END()                  /* end of sequence */
  49          };
  50          
C51 COMPILER V9.01   U8X8_D_SH1122                                                         04/30/2021 10:55:26 PAGE 2   

  51          static const uint8_t u8x8_d_sh1122_powersave1_seq[] = {
  52            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  53            U8X8_C(0x0ae),                    /* sh1122: display off */
  54            U8X8_END_TRANSFER(),              /* disable chip */
  55            U8X8_END()                  /* end of sequence */
  56          };
  57          
  58          
  59          
  60          
  61          /*
  62            input:
  63              one tile (8 Bytes)
  64            output:
  65              Tile for SH1122 (32 Bytes)
  66          */
  67          
  68          /*
  69          static uint8_t u8x8_sh1122_to32_dest_buf[32];
  70          
  71          static uint8_t *u8x8_sh1122_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
  72          {
  73            uint8_t v;
  74            uint8_t a,b;
  75            uint8_t i, j;
  76            uint8_t *dest;
  77            
  78            for( j = 0; j < 4; j++ )
  79            {
  80              dest = u8x8_sh1122_to32_dest_buf;
  81              dest += j;
  82              a =*ptr;
  83              ptr++;
  84              b = *ptr;
  85              ptr++;
  86              for( i = 0; i < 8; i++ )
  87              {
  88                v = 0;
  89                if ( a&1 ) v |= 0xf0;
  90                if ( b&1 ) v |= 0x0f;
  91                *dest = v;
  92                dest+=4;
  93                a >>= 1;
  94                b >>= 1;
  95              }
  96            }
  97            
  98            return u8x8_sh1122_to32_dest_buf;
  99          }
 100          */
 101          
 102          
 103          static uint8_t u8x8_write_byte_to_16gr_device(u8x8_t *u8x8, uint8_t b)
 104          {
 105   1        static uint8_t buf[4];
 106   1        static uint8_t map[4] = { 0, 0x00f, 0x0f0, 0x0ff };
 107   1        buf [3] = map[b & 3];
 108   1        b>>=2;
 109   1        buf [2] = map[b & 3];
 110   1        b>>=2;
 111   1        buf [1] = map[b & 3];
 112   1        b>>=2;
C51 COMPILER V9.01   U8X8_D_SH1122                                                         04/30/2021 10:55:26 PAGE 3   

 113   1        buf [0] = map[b & 3];
 114   1        return u8x8_cad_SendData(u8x8, 4, buf);
*** ERROR C208 IN LINE 114 OF ..\U8G2\CSRC\U8X8_D_SH1122.C: '_u8x8_cad_SendData': too many actual parameters
 115   1      }
 116          
 117          uint8_t u8x8_d_sh1122_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 118          {
 119   1        uint8_t x; 
 120   1        uint8_t y, c, i;
 121   1        uint8_t *ptr;
 122   1        switch(msg)
 123   1        {
 124   2          /* U8X8_MSG_DISPLAY_SETUP_MEMORY is handled by the calling function */
 125   2          /*
 126   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 127   2            break;
 128   2          case U8X8_MSG_DISPLAY_INIT:
 129   2            u8x8_d_helper_display_init(u8x8);
 130   2            u8x8_cad_SendSequence(u8x8, u8x8_d_sh1122_256x64_init_seq);
 131   2            break;
 132   2          */
 133   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 134   2            if ( arg_int == 0 )
 135   2        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1122_powersave0_seq);
*** ERROR C208 IN LINE 135 OF ..\U8G2\CSRC\U8X8_D_SH1122.C: '_u8x8_cad_SendSequence': too many actual parameters
 136   2            else
 137   2        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1122_powersave1_seq);
*** ERROR C208 IN LINE 137 OF ..\U8G2\CSRC\U8X8_D_SH1122.C: '_u8x8_cad_SendSequence': too many actual parameters
 138   2            break;
 139   2      #ifdef U8X8_WITH_SET_CONTRAST
 140   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 141   2            u8x8_cad_StartTransfer(u8x8);
 142   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 143   2            u8x8_cad_SendArg(u8x8, arg_int ); /* sh1122 has range from 0 to 255 */
 144   2            u8x8_cad_EndTransfer(u8x8);
 145   2            break;
 146   2      #endif
 147   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
 148   2            u8x8_cad_StartTransfer(u8x8);
 149   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 150   2            x *= 2;   // only every 4th col can be addressed
 151   2            x += u8x8->x_offset;    
 152   2          
 153   2            y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 154   2            y *= 8;
 155   2                
 156   2            
 157   2            c = ((u8x8_tile_t *)arg_ptr)->cnt;  /* number of tiles */
 158   2            ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr; /* data ptr to the tiles */
 159   2            for( i = 0; i < 8; i++ )
 160   2            {
 161   3        u8x8_cad_SendCmd(u8x8, 0x0b0 ); /* set row address */
 162   3        u8x8_cad_SendArg(u8x8, y);
 163   3        u8x8_cad_SendCmd(u8x8, x & 15 );  /* lower 4 bit*/
 164   3        u8x8_cad_SendCmd(u8x8, 0x010 | (x >> 4) );  /* higher 3 bit */    
 165   3        c = ((u8x8_tile_t *)arg_ptr)->cnt;  /* number of tiles */
 166   3      
 167   3        while (  c > 0 )
 168   3        {
 169   4          u8x8_write_byte_to_16gr_device(u8x8, *ptr);
 170   4          c--;
 171   4          ptr++;
C51 COMPILER V9.01   U8X8_D_SH1122                                                         04/30/2021 10:55:26 PAGE 4   

 172   4        }
 173   3        y++;
 174   3            }
 175   2      
 176   2            
 177   2            u8x8_cad_EndTransfer(u8x8);
 178   2            break;
 179   2          default:
 180   2            return 0;
 181   2        }
 182   1        return 1;
 183   1      }
 184          
 185          /*=========================================================*/
 186          
 187          static const uint8_t u8x8_d_sh1122_256x64_flip0_seq[] = {
 188            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 189            U8X8_C(0x0a1),    /* remap */
 190            U8X8_C(0x0c8),    /* remap */
 191            U8X8_C(0x060),
 192            U8X8_END_TRANSFER(),              /* disable chip */
 193            U8X8_END()                  /* end of sequence */
 194          };
 195          
 196          static const uint8_t u8x8_d_sh1122_256x64_flip1_seq[] = {
 197            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 198            U8X8_C(0x0a0),    /* remap */
 199            U8X8_C(0x0c0),    /* remap */
 200            U8X8_C(0x040),
 201            U8X8_END_TRANSFER(),              /* disable chip */
 202            U8X8_END()                  /* end of sequence */
 203          };
 204          
 205          static const u8x8_display_info_t u8x8_sh1122_256x64_display_info =
 206          {
 207            /* chip_enable_level = */ 0,
 208            /* chip_disable_level = */ 1,
 209            
 210            /* post_chip_enable_wait_ns = */ 20,
 211            /* pre_chip_disable_wait_ns = */ 10,
 212            /* reset_pulse_width_ms = */ 10,  /* sh1122: 10 us */
 213            /* post_reset_wait_ms = */ 20,  /* */
 214            /* sda_setup_time_ns = */ 125,    /* sh1122: cycle time is 250ns, so use 250/2 */
 215            /* sck_pulse_width_ns = */ 125, /* sh1122: cycle time is 250ns, so use 250/2 */
 216            /* sck_clock_hz = */ 40000000UL,  /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/
             -sck_pulse_width_ns  */
 217            /* spi_mode = */ 0,   /* active high, rising edge */
 218            /* i2c_bus_clock_100kHz = */ 4,
 219            /* data_setup_time_ns = */ 10,
 220            /* write_pulse_width_ns = */ 150, /* sh1122: cycle time is 300ns, so use 300/2 = 150 */
 221            /* tile_width = */ 32,    /* 256 pixel, so we require 32 bytes for this */
 222            /* tile_hight = */ 8,
 223            /* default_x_offset = */ 0, /* this is the byte offset (there are two pixel per byte with 4 bit per pixe
             -l) */
 224            /* flipmode_x_offset = */ 0,
 225            /* pixel_width = */ 256,
 226            /* pixel_height = */ 64
 227          };
 228          
 229          
 230          static const uint8_t u8x8_d_sh1122_256x64_init_seq[] = {
 231              
C51 COMPILER V9.01   U8X8_D_SH1122                                                         04/30/2021 10:55:26 PAGE 5   

 232            U8X8_DLY(1),
 233            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 234            U8X8_DLY(1),
 235            
 236            U8X8_C(0xae),                   /* display off */
 237            U8X8_C(0x40),       /* display start line */  
 238            U8X8_C(0x0a0),    /* remap */
 239            U8X8_C(0x0c0),    /* remap */
 240            U8X8_CA(0x81, 0x80),      /* set display contrast  */  
 241            U8X8_CA(0xa8, 0x3f),      /* multiplex ratio 1/64 Duty (0x0F~0x3F) */  
 242            U8X8_CA(0xad, 0x81),      /* use buildin DC-DC with 0.6 * 500 kHz */  
 243            
 244            U8X8_CA(0xd5, 0x50),      /* set display clock divide ratio (lower 4 bit)/oscillator frequency (upper 4 bit
             -)  */  
 245            U8X8_CA(0xd3, 0x00),      /* display offset, shift mapping ram counter */  
 246            U8X8_CA(0xd9, 0x22),      /* pre charge (lower 4 bit) and discharge(higher 4 bit) period */  
 247            U8X8_CA(0xdb, 0x35),      /* VCOM deselect level */  
 248            U8X8_CA(0xdc, 0x35),      /* Pre Charge output voltage */  
 249            U8X8_C(0x030),        /* discharge level */
 250          
 251            U8X8_DLY(1),          /* delay  */
 252          
 253            U8X8_END_TRANSFER(),              /* disable chip */
 254            U8X8_END()                  /* end of sequence */
 255          };
 256          
 257          
 258          uint8_t u8x8_d_sh1122_256x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 259          {
 260   1        switch(msg)
 261   1        {
 262   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 263   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1122_256x64_display_info);
 264   2            break;
 265   2          case U8X8_MSG_DISPLAY_INIT:
 266   2            u8x8_d_helper_display_init(u8x8);
 267   2            u8x8_cad_SendSequence(u8x8, u8x8_d_sh1122_256x64_init_seq);
*** ERROR C208 IN LINE 267 OF ..\U8G2\CSRC\U8X8_D_SH1122.C: '_u8x8_cad_SendSequence': too many actual parameters
 268   2            break;
 269   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 270   2            if ( arg_int == 0 )
 271   2            {
 272   3        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1122_256x64_flip0_seq);
*** ERROR C208 IN LINE 272 OF ..\U8G2\CSRC\U8X8_D_SH1122.C: '_u8x8_cad_SendSequence': too many actual parameters
 273   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
 274   3            }
 275   2            else
 276   2            {
 277   3        u8x8_cad_SendSequence(u8x8, u8x8_d_sh1122_256x64_flip1_seq);
*** ERROR C208 IN LINE 277 OF ..\U8G2\CSRC\U8X8_D_SH1122.C: '_u8x8_cad_SendSequence': too many actual parameters
 278   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 279   3            }
 280   2            break;
 281   2          
 282   2          default:
 283   2            return u8x8_d_sh1122_common(u8x8, msg, arg_int, arg_ptr);
 284   2        }
 285   1        return 1;
 286   1      }
 287          

C51 COMPILATION COMPLETE.  0 WARNING(S),  9 ERROR(S)
