C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE U8X8_D_ST7567
OBJECT MODULE PLACED IN .\Objects\u8x8_d_st7567.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\csrc\u8x8_d_st7567.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,SPEED) BRO
                    -WSE INCDIR(..\USER;..\SYS;..\BSP\BSP_485;..\BSP\BSP_ADC;..\BSP\BSP_KEY;..\BSP\BSP_OLED_IIC;..\APP) DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\u8x8_d_st7567.lst) TABS(2) OBJECT(.\Objects\u8x8_d_st7567.obj)

line level    source

   1          /*
   2          
   3            u8x8_d_st7567.c
   4            
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2016, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33          
  34            
  35          */
  36          #include "u8x8.h"
*** ERROR C141 IN LINE 600 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 632 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
*** ERROR C141 IN LINE 663 OF ..\U8G2\CSRC\U8X8.H: syntax error near ')'
  37          
  38          
  39          
  40          
  41          static const uint8_t u8x8_d_st7567_132x64_powersave0_seq[] = {
  42            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  43            U8X8_C(0x0a4),                    /* all pixel off, issue 142 */
  44            U8X8_C(0x0af),                    /* display on */
  45            U8X8_END_TRANSFER(),              /* disable chip */
  46            U8X8_END()                  /* end of sequence */
  47          };
  48          
  49          static const uint8_t u8x8_d_st7567_132x64_powersave1_seq[] = {
  50            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 2   

  51            U8X8_C(0x0ae),                    /* display off */
  52            U8X8_C(0x0a5),                    /* enter powersafe: all pixel on, issue 142 */
  53            U8X8_END_TRANSFER(),              /* disable chip */
  54            U8X8_END()                  /* end of sequence */
  55          };
  56          
  57          static const uint8_t u8x8_d_st7567_132x64_flip0_seq[] = {
  58            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  59            U8X8_C(0x0a1),        /* segment remap a0/a1*/
  60            U8X8_C(0x0c0),        /* c0: scan dir normal, c8: reverse */
  61            U8X8_END_TRANSFER(),              /* disable chip */
  62            U8X8_END()                  /* end of sequence */
  63          };
  64          
  65          static const uint8_t u8x8_d_st7567_132x64_flip1_seq[] = {
  66            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  67            U8X8_C(0x0a0),        /* segment remap a0/a1*/
  68            U8X8_C(0x0c8),        /* c0: scan dir normal, c8: reverse */
  69            U8X8_END_TRANSFER(),              /* disable chip */
  70            U8X8_END()                  /* end of sequence */
  71          };
  72          
  73          static const uint8_t u8x8_d_st7567_n_flip0_seq[] = {
  74            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  75            U8X8_C(0x0a0),        /* segment remap a0/a1*/
  76            U8X8_C(0x0c0),        /* c0: scan dir normal, c8: reverse */
  77            U8X8_END_TRANSFER(),              /* disable chip */
  78            U8X8_END()                  /* end of sequence */
  79          };
  80          
  81          static const uint8_t u8x8_d_st7567_n_flip1_seq[] = {
  82            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  83            U8X8_C(0x0a1),        /* segment remap a0/a1*/
  84            U8X8_C(0x0c8),        /* c0: scan dir normal, c8: reverse */
  85            U8X8_END_TRANSFER(),              /* disable chip */
  86            U8X8_END()                  /* end of sequence */
  87          };
  88          
  89          
  90          
  91          /*=====================================================*/
  92          
  93          
  94          static const u8x8_display_info_t u8x8_st7567_132x64_display_info =
  95          {
  96            /* chip_enable_level = */ 0,
  97            /* chip_disable_level = */ 1,
  98            
  99            /* post_chip_enable_wait_ns = */ 150, /* */
 100            /* pre_chip_disable_wait_ns = */ 50,  /* */
 101            /* reset_pulse_width_ms = */ 1, 
 102            /* post_reset_wait_ms = */ 1, 
 103            /* sda_setup_time_ns = */ 50,   /* */
 104            /* sck_pulse_width_ns = */ 120, /* */
 105            /* sck_clock_hz = */ 4000000UL, /* */
 106            /* spi_mode = */ 0,   /* active high, rising edge */
 107            /* i2c_bus_clock_100kHz = */ 4,
 108            /* data_setup_time_ns = */ 40,  /* */
 109            /* write_pulse_width_ns = */ 80,  /* */
 110            /* tile_width = */ 17,    /* width of 17*8=136 pixel */
 111            /* tile_hight = */ 8,
 112            /* default_x_offset = */ 0,
C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 3   

 113            /* flipmode_x_offset = */ 0,
 114            /* pixel_width = */ 132,
 115            /* pixel_height = */ 64
 116          };
 117          
 118          static const uint8_t u8x8_d_st7567_132x64_init_seq[] = {
 119              
 120            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 121            
 122            U8X8_C(0x0e2),                  /* soft reset */
 123            U8X8_C(0x0ae),                    /* display off */
 124            U8X8_C(0x040),                    /* set display start line to 0 */
 125            
 126            U8X8_C(0x0a1),                    /* ADC set to reverse */
 127            U8X8_C(0x0c0),                    /* common output mode */
 128            // Flipmode
 129            //U8X8_C(0x0a0),                    /* ADC set to reverse */
 130            //U8X8_C(0x0c8),                    /* common output mode */
 131            
 132            U8X8_C(0x0a6),                    /* display normal, bit val 0: LCD pixel off. */
 133            U8X8_C(0x0a3),                    /* LCD bias 1/7 */
 134            /* power on sequence from paxinstruments */
 135            U8X8_C(0x028|4),                    /* all power  control circuits on */
 136            U8X8_DLY(50),
 137            U8X8_C(0x028|6),                    /* all power  control circuits on */
 138            U8X8_DLY(50),
 139            U8X8_C(0x028|7),                    /* all power  control circuits on */
 140            U8X8_DLY(50),
 141            
 142            U8X8_C(0x026),                    /* v0 voltage resistor ratio */
 143            U8X8_CA(0x081, 0x027),    /* set contrast, contrast value*/
 144            
 145            U8X8_C(0x0ae),                    /* display off */
 146            U8X8_C(0x0a5),                    /* enter powersafe: all pixel on, issue 142 */
 147             
 148            U8X8_END_TRANSFER(),              /* disable chip */
 149            U8X8_END()                  /* end of sequence */
 150          };
 151          
 152          /* pax instruments 132x64 display */
 153          uint8_t u8x8_d_st7567_pi_132x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 154          {
 155   1        uint8_t x, c;
 156   1        uint8_t *ptr;
 157   1        switch(msg)
 158   1        {
 159   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 160   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7567_132x64_display_info);
 161   2            break;
 162   2          case U8X8_MSG_DISPLAY_INIT:
 163   2            u8x8_d_helper_display_init(u8x8);
 164   2            u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_init_seq);
*** ERROR C208 IN LINE 164 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 165   2            break;
 166   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 167   2            if ( arg_int == 0 )
 168   2        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_powersave0_seq);
*** ERROR C208 IN LINE 168 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 169   2            else
 170   2        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_powersave1_seq);
*** ERROR C208 IN LINE 170 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 171   2            break;
C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 4   

 172   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 173   2            if ( arg_int == 0 )
 174   2            {
 175   3        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_flip0_seq);
*** ERROR C208 IN LINE 175 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 176   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
 177   3            }
 178   2            else
 179   2            {
 180   3        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_flip1_seq);
*** ERROR C208 IN LINE 180 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 181   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 182   3            } 
 183   2            break;
 184   2      #ifdef U8X8_WITH_SET_CONTRAST
 185   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 186   2            u8x8_cad_StartTransfer(u8x8);
 187   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 188   2            u8x8_cad_SendArg(u8x8, arg_int >> 2 );  /* st7567 has range from 0 to 63 */
 189   2            u8x8_cad_EndTransfer(u8x8);
 190   2            break;
 191   2      #endif
 192   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
 193   2            u8x8_cad_StartTransfer(u8x8);
 194   2          
 195   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 196   2            x *= 8;
 197   2            x += u8x8->x_offset;
 198   2            u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 199   2            u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 200   2            u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 201   2          
 202   2            c = ((u8x8_tile_t *)arg_ptr)->cnt;
 203   2            c *= 8;
 204   2            ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 205   2            /* 
 206   2        The following if condition checks the hardware limits of the st7567 
 207   2        controller: It is not allowed to write beyond the display limits.
 208   2        This is in fact an issue within flip mode.
 209   2            */
 210   2            if ( c + x > 132u )
 211   2            {
 212   3        c = 132u;
 213   3        c -= x;
 214   3            }
 215   2            do
 216   2            {
 217   3        u8x8_cad_SendData(u8x8, c, ptr);  /* note: SendData can not handle more than 255 bytes */
*** ERROR C208 IN LINE 217 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendData': too many actual parameters
 218   3        arg_int--;
 219   3            } while( arg_int > 0 );
 220   2            
 221   2            u8x8_cad_EndTransfer(u8x8);
 222   2            break;
 223   2          default:
 224   2            return 0;
 225   2        }
 226   1        return 1;
 227   1      }
 228          
 229          
 230          
C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 5   

 231          
 232          /*=====================================================*/
 233          
 234          
 235          
 236          
 237          
 238          static const u8x8_display_info_t u8x8_st7567_jlx12864_display_info =
 239          {
 240            /* chip_enable_level = */ 0,
 241            /* chip_disable_level = */ 1,
 242            
 243            /* post_chip_enable_wait_ns = */ 150, /* */
 244            /* pre_chip_disable_wait_ns = */ 50,  /* */
 245            /* reset_pulse_width_ms = */ 1, 
 246            /* post_reset_wait_ms = */ 1, 
 247            /* sda_setup_time_ns = */ 50,   /* */
 248            /* sck_pulse_width_ns = */ 120, /* */
 249            /* sck_clock_hz = */ 4000000UL, /* */
 250            /* spi_mode = */ 0,   /* active high, rising edge */
 251            /* i2c_bus_clock_100kHz = */ 4,
 252            /* data_setup_time_ns = */ 40,  /* */
 253            /* write_pulse_width_ns = */ 80,  /* */
 254            /* tile_width = */ 16,    /* width of 16*8=128 pixel */
 255            /* tile_hight = */ 8,
 256            /* default_x_offset = */ 4,
 257            /* flipmode_x_offset = */ 0,
 258            /* pixel_width = */ 128,
 259            /* pixel_height = */ 64
 260          };
 261          
 262          static const uint8_t u8x8_st7567_jlx12864_init_seq[] = {
 263              
 264            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 265            
 266            U8X8_C(0x0e2),                  /* soft reset */
 267            U8X8_C(0x0ae),                    /* display off */
 268            U8X8_C(0x040),                    /* set display start line to 0 */
 269            
 270            U8X8_C(0x0a1),                    /* ADC set to reverse */
 271            U8X8_C(0x0c0),                    /* common output mode */
 272            // Flipmode
 273            //U8X8_C(0x0a0),                    /* ADC set to reverse */
 274            //U8X8_C(0x0c8),                    /* common output mode */
 275            
 276            U8X8_C(0x0a6),                    /* display normal, bit val 0: LCD pixel off. */
 277            U8X8_C(0x0a3),                    /* LCD bias 1/7 */
 278            /* power on sequence from paxinstruments */
 279            U8X8_C(0x028|4),                    /* all power  control circuits on */
 280            U8X8_DLY(50),
 281            U8X8_C(0x028|6),                    /* all power  control circuits on */
 282            U8X8_DLY(50),
 283            U8X8_C(0x028|7),                    /* all power  control circuits on */
 284            U8X8_DLY(50),
 285            
 286            U8X8_C(0x023),                    /* v0 voltage resistor ratio */
 287            U8X8_CA(0x081, 42>>2),    /* set contrast, contrast value*/
 288            
 289            U8X8_C(0x0ae),                    /* display off */
 290            U8X8_C(0x0a5),                    /* enter powersafe: all pixel on, issue 142 */
 291             
 292            U8X8_END_TRANSFER(),              /* disable chip */
C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 6   

 293            U8X8_END()                  /* end of sequence */
 294          };
 295          
 296          /* JLX12864 display */
 297          uint8_t u8x8_d_st7567_jlx12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 298          {
 299   1        uint8_t x, c;
 300   1        uint8_t *ptr;
 301   1        switch(msg)
 302   1        {
 303   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 304   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7567_jlx12864_display_info);
 305   2            break;
 306   2          case U8X8_MSG_DISPLAY_INIT:
 307   2            u8x8_d_helper_display_init(u8x8);
 308   2            u8x8_cad_SendSequence(u8x8, u8x8_st7567_jlx12864_init_seq);
*** ERROR C208 IN LINE 308 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 309   2            break;
 310   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 311   2            if ( arg_int == 0 )
 312   2        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_powersave0_seq);
*** ERROR C208 IN LINE 312 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 313   2            else
 314   2        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_powersave1_seq);
*** ERROR C208 IN LINE 314 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 315   2            break;
 316   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 317   2            if ( arg_int == 0 )
 318   2            {
 319   3        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_flip0_seq);
*** ERROR C208 IN LINE 319 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 320   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
 321   3            }
 322   2            else
 323   2            {
 324   3        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_flip1_seq);
*** ERROR C208 IN LINE 324 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 325   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 326   3            } 
 327   2            break;
 328   2      #ifdef U8X8_WITH_SET_CONTRAST
 329   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 330   2            u8x8_cad_StartTransfer(u8x8);
 331   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 332   2            u8x8_cad_SendArg(u8x8, arg_int >> 2 );  /* st7567 has range from 0 to 63 */
 333   2            u8x8_cad_EndTransfer(u8x8);
 334   2            break;
 335   2      #endif
 336   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
 337   2            u8x8_cad_StartTransfer(u8x8);
 338   2          
 339   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 340   2            x *= 8;
 341   2            x += u8x8->x_offset;
 342   2            u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 343   2            u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 344   2            u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 345   2          
 346   2            c = ((u8x8_tile_t *)arg_ptr)->cnt;
 347   2            c *= 8;
 348   2            ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 349   2            /* 
C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 7   

 350   2        The following if condition checks the hardware limits of the st7567 
 351   2        controller: It is not allowed to write beyond the display limits.
 352   2        This is in fact an issue within flip mode.
 353   2            */
 354   2            if ( c + x > 132u )
 355   2            {
 356   3        c = 132u;
 357   3        c -= x;
 358   3            }
 359   2            do
 360   2            {
 361   3        u8x8_cad_SendData(u8x8, c, ptr);  /* note: SendData can not handle more than 255 bytes */
*** ERROR C208 IN LINE 361 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendData': too many actual parameters
 362   3        arg_int--;
 363   3            } while( arg_int > 0 );
 364   2            
 365   2            u8x8_cad_EndTransfer(u8x8);
 366   2            break;
 367   2          default:
 368   2            return 0;
 369   2        }
 370   1        return 1;
 371   1      }
 372          
 373          
 374          /*=====================================================*/
 375          
 376          
 377          
 378          static const u8x8_display_info_t u8x8_st7567_enh_dg128064_display_info =
 379          {
 380            /* chip_enable_level = */ 0,
 381            /* chip_disable_level = */ 1,
 382            
 383            /* post_chip_enable_wait_ns = */ 150, /* */
 384            /* pre_chip_disable_wait_ns = */ 50,  /* */
 385            /* reset_pulse_width_ms = */ 1, 
 386            /* post_reset_wait_ms = */ 1, 
 387            /* sda_setup_time_ns = */ 50,   /* */
 388            /* sck_pulse_width_ns = */ 120, /* */
 389            /* sck_clock_hz = */ 4000000UL, /* */
 390            /* spi_mode = */ 0,   /* active high, rising edge */
 391            /* i2c_bus_clock_100kHz = */ 4,
 392            /* data_setup_time_ns = */ 40,  /* */
 393            /* write_pulse_width_ns = */ 80,  /* */
 394            /* tile_width = */ 16,    /* width of 16*8=128 pixel */
 395            /* tile_hight = */ 8,
 396            /* default_x_offset = */ 0,
 397            /* flipmode_x_offset = */ 4,
 398            /* pixel_width = */ 128,
 399            /* pixel_height = */ 64
 400          };
 401          
 402          static const u8x8_display_info_t u8x8_st7567_enh_dg128064i_display_info =
 403          {
 404            /* chip_enable_level = */ 0,
 405            /* chip_disable_level = */ 1,
 406            
 407            /* post_chip_enable_wait_ns = */ 150, /* */
 408            /* pre_chip_disable_wait_ns = */ 50,  /* */
 409            /* reset_pulse_width_ms = */ 1, 
 410            /* post_reset_wait_ms = */ 1, 
C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 8   

 411            /* sda_setup_time_ns = */ 50,   /* */
 412            /* sck_pulse_width_ns = */ 120, /* */
 413            /* sck_clock_hz = */ 4000000UL, /* */
 414            /* spi_mode = */ 0,   /* active high, rising edge */
 415            /* i2c_bus_clock_100kHz = */ 4,
 416            /* data_setup_time_ns = */ 40,  /* */
 417            /* write_pulse_width_ns = */ 80,  /* */
 418            /* tile_width = */ 16,    /* width of 16*8=128 pixel */
 419            /* tile_hight = */ 8,
 420            /* default_x_offset = */ 4,
 421            /* flipmode_x_offset = */ 0,
 422            /* pixel_width = */ 128,
 423            /* pixel_height = */ 64
 424          };
 425          
 426          static const uint8_t u8x8_st7567_enh_dg128064_init_seq[] = {
 427              
 428            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 429            
 430            U8X8_C(0x0e2),                  /* soft reset */
 431            U8X8_C(0x0ae),                    /* display off */
 432            U8X8_C(0x040),                    /* set display start line to 0 */
 433            
 434            U8X8_C(0x0a1),                    /* ADC set to reverse */
 435            U8X8_C(0x0c0),                    /* common output mode */
 436            // Flipmode
 437            //U8X8_C(0x0a0),                    /* ADC set to reverse */
 438            //U8X8_C(0x0c8),                    /* common output mode */
 439            
 440            U8X8_C(0x0a6),                    /* display normal, bit val 0: LCD pixel off. */
 441            U8X8_C(0x0a2),                    /* LCD bias 1/9 */
 442            /* power on sequence from paxinstruments */
 443            U8X8_C(0x028|4),                    /* all power  control circuits on */
 444            U8X8_DLY(50),
 445            U8X8_C(0x028|6),                    /* all power  control circuits on */
 446            U8X8_DLY(50),
 447            U8X8_C(0x028|7),                    /* all power  control circuits on */
 448            U8X8_DLY(50),
 449            
 450            U8X8_C(0x023),                    /* v0 voltage resistor ratio */
 451            U8X8_CA(0x081, 200>>2),   /* set contrast, contrast value*/
 452            
 453            U8X8_C(0x0ae),                    /* display off */
 454            U8X8_C(0x0a5),                    /* enter powersafe: all pixel on, issue 142 */
 455             
 456            U8X8_END_TRANSFER(),              /* disable chip */
 457            U8X8_END()                  /* end of sequence */
 458          };
 459          
 460          /* ENH-DG128064 transparent display */
 461          static uint8_t u8x8_d_st7567_enh_dg128064_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_pt
             -r)
 462          {
 463   1        uint8_t x, c;
 464   1        uint8_t *ptr;
 465   1        switch(msg)
 466   1        {
 467   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 468   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7567_enh_dg128064_display_info);
 469   2            break;
 470   2          case U8X8_MSG_DISPLAY_INIT:
 471   2            u8x8_d_helper_display_init(u8x8);
C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 9   

 472   2            u8x8_cad_SendSequence(u8x8, u8x8_st7567_enh_dg128064_init_seq);
*** ERROR C208 IN LINE 472 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 473   2            break;
 474   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 475   2            if ( arg_int == 0 )
 476   2        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_powersave0_seq);
*** ERROR C208 IN LINE 476 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 477   2            else
 478   2        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_powersave1_seq);
*** ERROR C208 IN LINE 478 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 479   2            break;
 480   2      #ifdef U8X8_WITH_SET_CONTRAST
 481   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 482   2            u8x8_cad_StartTransfer(u8x8);
 483   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 484   2            u8x8_cad_SendArg(u8x8, arg_int >> 2 );  /* st7567 has range from 0 to 63 */
 485   2            u8x8_cad_EndTransfer(u8x8);
 486   2            break;
 487   2      #endif
 488   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
 489   2            u8x8_cad_StartTransfer(u8x8);
 490   2          
 491   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 492   2            x *= 8;
 493   2            x += u8x8->x_offset;
 494   2            u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 495   2            u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 496   2            u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 497   2          
 498   2            c = ((u8x8_tile_t *)arg_ptr)->cnt;
 499   2            c *= 8;
 500   2            ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 501   2            /* 
 502   2        The following if condition checks the hardware limits of the st7567 
 503   2        controller: It is not allowed to write beyond the display limits.
 504   2        This is in fact an issue within flip mode.
 505   2            */
 506   2            if ( c + x > 132u )
 507   2            {
 508   3        c = 132u;
 509   3        c -= x;
 510   3            }
 511   2            do
 512   2            {
 513   3        u8x8_cad_SendData(u8x8, c, ptr);  /* note: SendData can not handle more than 255 bytes */
*** ERROR C208 IN LINE 513 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendData': too many actual parameters
 514   3        arg_int--;
 515   3            } while( arg_int > 0 );
 516   2            
 517   2            u8x8_cad_EndTransfer(u8x8);
 518   2            break;
 519   2          default:
 520   2            return 0;
 521   2        }
 522   1        return 1;
 523   1      }
 524          
 525          uint8_t u8x8_d_st7567_enh_dg128064(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 526          {
 527   1        switch(msg)
 528   1        {
 529   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 10  

 530   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7567_enh_dg128064_display_info);
 531   2            break;
 532   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 533   2            if ( arg_int == 0 )
 534   2            {
 535   3        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_n_flip0_seq);
*** ERROR C208 IN LINE 535 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 536   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
 537   3            }
 538   2            else
 539   2            {
 540   3        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_n_flip1_seq);
*** ERROR C208 IN LINE 540 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 541   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 542   3            } 
 543   2            break;
 544   2          default:
 545   2            return u8x8_d_st7567_enh_dg128064_generic(u8x8, msg, arg_int, arg_ptr);
 546   2        }
 547   1        return 1;
 548   1      }
 549          
 550          uint8_t u8x8_d_st7567_enh_dg128064i(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 551          {
 552   1        switch(msg)
 553   1        {
 554   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 555   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7567_enh_dg128064i_display_info);
 556   2            break;
 557   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 558   2            if ( arg_int == 0 )
 559   2            {
 560   3        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_flip0_seq);
*** ERROR C208 IN LINE 560 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 561   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
 562   3            }
 563   2            else
 564   2            {
 565   3        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_flip1_seq);
*** ERROR C208 IN LINE 565 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 566   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 567   3            } 
 568   2            break;
 569   2          default:
 570   2            return u8x8_d_st7567_enh_dg128064_generic(u8x8, msg, arg_int, arg_ptr);
 571   2        }
 572   1        return 1;
 573   1      }
 574          
 575          
 576          /*=====================================================*/
 577          /* issue 657 */
 578          
 579          static const u8x8_display_info_t u8x8_st7567_64x32_display_info =
 580          {
 581            /* chip_enable_level = */ 0,
 582            /* chip_disable_level = */ 1,
 583            
 584            /* post_chip_enable_wait_ns = */ 150, /* */
 585            /* pre_chip_disable_wait_ns = */ 50,  /* */
 586            /* reset_pulse_width_ms = */ 1, 
 587            /* post_reset_wait_ms = */ 1, 
C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 11  

 588            /* sda_setup_time_ns = */ 50,   /* */
 589            /* sck_pulse_width_ns = */ 120, /* */
 590            /* sck_clock_hz = */ 4000000UL, /* */
 591            /* spi_mode = */ 0,   /* active high, rising edge */
 592            /* i2c_bus_clock_100kHz = */ 4,
 593            /* data_setup_time_ns = */ 40,  /* */
 594            /* write_pulse_width_ns = */ 80,  /* */
 595            /* tile_width = */ 8,   
 596            /* tile_hight = */ 4,
 597            /* default_x_offset = */ 32,
 598            /* flipmode_x_offset = */ 32,
 599            /* pixel_width = */ 64,
 600            /* pixel_height = */ 32
 601          };
 602          
 603          static const uint8_t u8x8_st7567_64x32_init_seq[] = {
 604              
 605            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 606            
 607            U8X8_C(0x0e2),                  /* soft reset */
 608            U8X8_C(0x0ae),                    /* display off */
 609            U8X8_C(0x040),                    /* set display start line to 0 */
 610            
 611            U8X8_C(0x0a1),                    /* ADC */
 612            U8X8_C(0x0c0),                    /* common output mode */
 613            // Flipmode
 614            //U8X8_C(0x0a0),                    /* ADC  */
 615            //U8X8_C(0x0c8),                    /* common output mode */
 616            
 617            U8X8_C(0x0a6),                    /* display normal, bit val 0: LCD pixel off. */
 618            U8X8_C(0x0a2),                    /* LCD bias 1/9 */
 619            U8X8_C(0x028|4),                    /* all power  control circuits on */
 620            U8X8_DLY(50),
 621            U8X8_C(0x028|6),                    /* all power  control circuits on */
 622            U8X8_DLY(50),
 623            U8X8_C(0x028|7),                    /* all power  control circuits on */
 624            U8X8_DLY(50),
 625            
 626            U8X8_C(0x024),                    /* v0 voltage resistor ratio, taken from issue 657 */
 627            U8X8_CA(0x081, 0x080),    /* set contrast, contrast value*/
 628            
 629            U8X8_C(0x0ae),                    /* display off */
 630            U8X8_C(0x0a5),                    /* enter powersafe: all pixel on, issue 142 */
 631             
 632            U8X8_END_TRANSFER(),              /* disable chip */
 633            U8X8_END()                  /* end of sequence */
 634          };
 635          
 636          
 637          uint8_t u8x8_d_st7567_64x32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 638          {
 639   1        uint8_t x, c;
 640   1        uint8_t *ptr;
 641   1        switch(msg)
 642   1        {
 643   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 644   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7567_64x32_display_info);
 645   2            break;
 646   2          case U8X8_MSG_DISPLAY_INIT:
 647   2            u8x8_d_helper_display_init(u8x8);
 648   2            u8x8_cad_SendSequence(u8x8, u8x8_st7567_64x32_init_seq);
*** ERROR C208 IN LINE 648 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 12  

 649   2            break;
 650   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 651   2            if ( arg_int == 0 )
 652   2        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_powersave0_seq);
*** ERROR C208 IN LINE 652 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 653   2            else
 654   2        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_powersave1_seq);
*** ERROR C208 IN LINE 654 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 655   2            break;
 656   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 657   2            if ( arg_int == 0 )
 658   2            {
 659   3        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_flip0_seq);
*** ERROR C208 IN LINE 659 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 660   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
 661   3            }
 662   2            else
 663   2            {
 664   3        u8x8_cad_SendSequence(u8x8, u8x8_d_st7567_132x64_flip1_seq);
*** ERROR C208 IN LINE 664 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendSequence': too many actual parameters
 665   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 666   3            } 
 667   2            break;
 668   2      #ifdef U8X8_WITH_SET_CONTRAST
 669   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 670   2            u8x8_cad_StartTransfer(u8x8);
 671   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 672   2            u8x8_cad_SendArg(u8x8, arg_int >> 2 );  /* st7567 has range from 0 to 63 */
 673   2            u8x8_cad_EndTransfer(u8x8);
 674   2            break;
 675   2      #endif
 676   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
 677   2            u8x8_cad_StartTransfer(u8x8);
 678   2          
 679   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 680   2            x *= 8;
 681   2            x += u8x8->x_offset;
 682   2            u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 683   2            u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 684   2            u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 685   2          
 686   2            c = ((u8x8_tile_t *)arg_ptr)->cnt;
 687   2            c *= 8;
 688   2            ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 689   2            /* 
 690   2        The following if condition checks the hardware limits of the st7567 
 691   2        controller: It is not allowed to write beyond the display limits.
 692   2        This is in fact an issue within flip mode.
 693   2            */
 694   2            if ( c + x > 132u )
 695   2            {
 696   3        c = 132u;
 697   3        c -= x;
 698   3            }
 699   2            do
 700   2            {
 701   3        u8x8_cad_SendData(u8x8, c, ptr);  /* note: SendData can not handle more than 255 bytes */
*** ERROR C208 IN LINE 701 OF ..\U8G2\CSRC\U8X8_D_ST7567.C: '_u8x8_cad_SendData': too many actual parameters
 702   3        arg_int--;
 703   3            } while( arg_int > 0 );
 704   2            
 705   2            u8x8_cad_EndTransfer(u8x8);
C51 COMPILER V9.01   U8X8_D_ST7567                                                         04/30/2021 10:55:30 PAGE 13  

 706   2            break;
 707   2          default:
 708   2            return 0;
 709   2        }
 710   1        return 1;
 711   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  29 ERROR(S)
