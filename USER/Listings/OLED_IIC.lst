C51 COMPILER V9.01   OLED_IIC                                                              05/12/2021 16:57:03 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE OLED_IIC
OBJECT MODULE PLACED IN .\Objects\OLED_IIC.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\BSP\BSP_OLED_IIC\OLED_IIC.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,SPEED) B
                    -ROWSE INCDIR(..\USER;..\SYS;..\BSP\BSP_485;..\BSP\BSP_ADC;..\BSP\BSP_KEY;..\BSP\BSP_OLED_IIC;..\APP;..\BSP\BSP_IO) DEBUG
                    - OBJECTEXTEND PRINT(.\Listings\OLED_IIC.lst) TABS(2) OBJECT(.\Objects\OLED_IIC.obj)

line level    source

   1          #include <OLED_IIC.h>
   2          #include <OledFont.h>
   3          #include <intrins.h>
   4          #include <math.h>
   5          //[0]0 1 2 3 ... 127  
   6          //[1]0 1 2 3 ... 127  
   7          //[2]0 1 2 3 ... 127  
   8          //[3]0 1 2 3 ... 127  
   9          //[4]0 1 2 3 ... 127  
  10          //[5]0 1 2 3 ... 127  
  11          //[6]0 1 2 3 ... 127  
  12          //[7]0 1 2 3 ... 127 
  13          
  14          sbit IIC_SCL=P3^4;
  15          sbit IIC_SDA=P3^3;
  16          
  17          
  18          
  19          void Send_Byte(unsigned char c)
  20          {
  21   1        unsigned char dat;
  22   1        unsigned char i=0;
  23   1        dat = c;
  24   1        for(i=0;i<8;i++)
  25   1        {    
  26   2          IIC_SCL=0; 
  27   2          _Nop();
  28   2          if(dat&0x80)
  29   2            IIC_SDA=1;
  30   2           else  
  31   2            IIC_SDA=0;
  32   2           dat <<= 1;
  33   2          IIC_SCL=1; 
  34   2          _Nop(); 
  35   2        }
  36   1        IIC_SCL=0; 
  37   1      }
  38          void Write_IIC_Command(unsigned char IIC_Command)
  39          {
  40   1          Start_I2c();
  41   1          Send_Byte(0x78);//–¥ÔøΩÔøΩ”ªÔøΩÔøΩÔøΩ÷∑ÔøΩÔøΩSD0 = 0.
  42   1          Read_ACK();
  43   1          Send_Byte(0x00);//–¥ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
  44   1          Read_ACK();
  45   1          Send_Byte(IIC_Command);//ÔøΩÔøΩÔøΩÔøΩ
  46   1          Read_ACK();
  47   1          Stop_I2c();  //ÔøΩÔøΩÔøΩÔøΩÕ£÷πÔøΩ≈∫ÔøΩ
  48   1      }
  49          //
  50          void Write_IIC_Data(unsigned char IIC_Data)
  51          {
  52   1          Start_I2c();
  53   1          Send_Byte(0x78);  //–¥ÔøΩÔøΩ”ªÔøΩÔøΩÔøΩ÷∑ÔøΩÔøΩSD0 = 0
C51 COMPILER V9.01   OLED_IIC                                                              05/12/2021 16:57:03 PAGE 2   

  54   1          Read_ACK();
  55   1          Send_Byte(0x40);  //–¥ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
  56   1          Read_ACK();
  57   1          Send_Byte(IIC_Data);//ÔøΩÔøΩÔøΩÔøΩ
  58   1          Read_ACK();
  59   1          Stop_I2c();   //ÔøΩÔøΩÔøΩÔøΩÕ£÷πÔøΩ≈∫ÔøΩ
  60   1      }
  61          
  62          void OLED_WR_Byte(unsigned char dat,unsigned char cmd)
  63          {
  64   1        if(cmd) 
  65   1        {
  66   2        Write_IIC_Data(dat); 
  67   2        }
  68   1        else 
  69   1        {
  70   2        Write_IIC_Command(dat); 
  71   2        }
  72   1      }
  73          //
  74          
  75          void OLED_Set_Pos(unsigned char x, unsigned char y) 
  76          { 
  77   1        OLED_WR_Byte(0xb0+y,OLED_CMD);//–¥ÔøΩÔøΩ“≥ÔøΩÔøΩ÷∑
  78   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);//–¥ÔøΩÔøΩÔøΩ–µÕµÔøΩ÷∑
  79   1        OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD);  //–¥ÔøΩÔøΩÔøΩ–∏ﬂµÔøΩ÷∑
  80   1      }       
  81          
  82          
  83          
  84          void OLED_Display_On(void)
  85          {
  86   1        OLED_WR_Byte(0X8D,OLED_CMD);  //ÔøΩÔøΩÔøΩÔøΩOLEDÔøΩÔøΩ…±ÔøΩ
  87   1        OLED_WR_Byte(0X14,OLED_CMD);  // πÔøΩ‹£ÔøΩÔøΩÔøΩ
  88   1        OLED_WR_Byte(0XAF,OLED_CMD);  //ÔøΩÔøΩÔøΩÔøΩ æ
  89   1      }
  90          
  91          
  92          
  93          void OLED_Display_Off(void)
  94          {
  95   1        OLED_WR_Byte(0X8D,OLED_CMD);  //ÔøΩÔøΩÔøΩÔøΩOLEDÔøΩÔøΩ…±ÔøΩ
  96   1        OLED_WR_Byte(0X10,OLED_CMD);  // ßÔøΩ‹£ÔøΩÔøΩÔøΩ
  97   1        OLED_WR_Byte(0XAE,OLED_CMD);  //ÔøΩÔøΩÔøΩÔøΩ æ
  98   1      }            
  99          
 100          
 101            
 102          void OLED_Clear(void)  
 103          {  
 104   1        unsigned char i,n;        //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
 105   1        for(i=0;i<8;i++)  
 106   1        {  
 107   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //ÔøΩÔøΩ0~7“≥ÔøΩÔøΩÔøΩÔøΩ–¥ÔøΩÔøΩ
 108   2          OLED_WR_Byte (0x00,OLED_CMD);      //ÔøΩ–µÕµÔøΩ÷∑
 109   2          OLED_WR_Byte (0x10,OLED_CMD);      //ÔøΩ–∏ﬂµÔøΩ÷∑  
 110   2          for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); //–¥ÔøΩÔøΩ 0 ÔøΩÔøΩÔøΩÔøΩ
 111   2        }
 112   1      }
 113          unsigned int OLED_GRAM[144][8];
 114          //ÔøΩÔøΩÔøΩÔøΩÔøΩ‘¥ÊµΩOLED  
 115          void OLED_Refresh(void)
C51 COMPILER V9.01   OLED_IIC                                                              05/12/2021 16:57:03 PAGE 3   

 116          {
 117   1        unsigned int i,n;
 118   1        for(i=0;i<8;i++)
 119   1        {
 120   2           OLED_WR_Byte(0xb0+i,OLED_CMD); //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ ºÔøΩÔøΩ÷∑
 121   2           OLED_WR_Byte(0x00,OLED_CMD);   //ÔøΩÔøΩÔøΩ√µÔøΩÔøΩÔøΩÔøΩÔøΩ ºÔøΩÔøΩ÷∑
 122   2           OLED_WR_Byte(0x10,OLED_CMD);   //ÔøΩÔøΩÔøΩ√∏ÔøΩÔøΩÔøΩÔøΩÔøΩ ºÔøΩÔøΩ÷∑
 123   2           for(n=0;n<128;n++)
 124   2           OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 125   2        }
 126   1      }
 127          
 128          void OLED_ShowChar(unsigned char x,unsigned char y,unsigned char chr,unsigned char Char_Size)
 129          {       
 130   1        unsigned char c=0,i=0;  
 131   1          c=chr-' ';    
 132   1          if(x>Max_Column-1){x=0;y=y+2;}
 133   1          if(Char_Size ==16)// 16 = 8*16
 134   1            {
 135   2            OLED_Set_Pos(x,y);  
 136   2            for(i=0;i<8;i++)
 137   2            OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 138   2            OLED_Set_Pos(x,y+1);
 139   2            for(i=0;i<8;i++)
 140   2            OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 141   2            }
 142   1            else {  // 6 = 6*8
 143   2              OLED_Set_Pos(x,y);
 144   2              for(i=0;i<6;i++)
 145   2              OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 146   2              
 147   2            }
 148   1      }
 149          
 150          unsigned long oled_pow(unsigned char m,unsigned char n)
 151          {
 152   1        unsigned long result=1;  
 153   1        while(n--)result*=m;    
 154   1        return result;
 155   1      }         
 156              
 157          void OLED_ShowNum(unsigned char x,unsigned char y,unsigned int num,unsigned char len,unsigned char size2)
 158          {           
 159   1        unsigned char t,temp;  //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
 160   1        unsigned char enshow=0;   //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
 161   1        for(t=0;t<len;t++)
 162   1        {
 163   2          temp=(num/oled_pow(10,len-t-1))%10;//»°ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ√øÔøΩÔøΩŒªÔøΩÔøΩÔøΩ…∏ﬂµÔøΩÔøΩÔøΩ
 164   2          if(enshow==0&&t<(len-1)) //enshowÔøΩÔøΩÔøΩ«∑ÔøΩŒ™ÔøΩÔøΩ“ªÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩt<(len-1)ÔøΩÔøΩÔøΩ–∂ÔøΩÔøΩ«∑Ô
             -øΩŒ™ÔøΩÔøΩÔøΩ“ªÔøΩÔøΩÔøΩÔøΩ
 165   2          {
 166   3            if(temp==0) //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩŒ™0 
 167   3            {
 168   4              OLED_ShowChar(x+(size2/2)*t,y,' ',size2);//ÔøΩÔøΩ æ 0 ÔøΩÔøΩx+(size2/2)*tÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–°
             -∆´ÔøΩ∆µÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ8ÔøΩÔøΩ
 169   4              continue; //ÔøΩÔøΩÔøΩÔøΩ £ÔøΩÔøΩÔøΩÔøΩ‰£¨ÔøΩÔøΩÔøΩÔøΩÔøΩÿ∏ÔøΩ—≠ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÿ∏ÔøΩÔøΩÔøΩ 
             -æÔøΩÔøΩ
 170   4            }else enshow=1; 
 171   3             
 172   3          }
 173   2          OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); //ÔøΩÔøΩ æ“ªÔøΩÔøΩŒªÔøΩÔøΩx+(size2/2)*tÔøΩÔøΩÔøΩÔøΩÔøΩÔø
             -ΩÔøΩÔøΩÔøΩ–°∆´ÔøΩ∆µÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ8ÔøΩÔøΩ
C51 COMPILER V9.01   OLED_IIC                                                              05/12/2021 16:57:03 PAGE 4   

 174   2        }
 175   1      } 
 176          
 177          void OLED_ShowIntegerNumber(unsigned char x,unsigned char y,int num,unsigned char Char_Size)
 178          {//TODO 
 179   1        unsigned char len=0;
 180   1        int buf=num;
 181   1        while(buf)
 182   1        {
 183   2          len++;
 184   2          buf/=10;
 185   2        }
 186   1        if(num>0)
 187   1        {
 188   2          OLED_ShowNum(x,y,num,len,Char_Size);
 189   2        }
 190   1        else if(num<0)
 191   1        {
 192   2          OLED_ShowChar(x,y,'-',Char_Size);
 193   2          num=abs(num);
 194   2          if(Char_Size==16)
 195   2            OLED_ShowNum(x+8,y,num,len,Char_Size);
 196   2          else
 197   2            OLED_ShowNum(x+6,y,num,len,Char_Size);
 198   2        }
 199   1        else if(num==0)
 200   1        {
 201   2          OLED_ShowNum(x,y,0,1,Char_Size);
 202   2        }
 203   1      }
 204          
 205          void OLED_ShowFloatNumber(unsigned char  x,unsigned char  y,float num,unsigned char  Char_Size)
 206          {//TODO
 207   1        unsigned char zheng_len=0,xiao_len=0,polarity_flag=0;
 208   1        int zheng=0,xiao=0;   
 209   1        if(num>0)
 210   1          polarity_flag=1;
 211   1        else
 212   1        {
 213   2          polarity_flag=0;
 214   2          num=-num;
 215   2        }
 216   1        zheng=(int)num;
 217   1        xiao=((num-zheng)*100)/1; //ÊòæÁ§∫Â∞èÊï∞ÁÇπÂêé‰∏§‰Ωç
 218   1        if(zheng)
 219   1        {
 220   2          while(zheng)  //ËÆ°ÁÆóÊï¥Êï∞ÈÉ®ÂàÜ‰ΩçÊï∞
 221   2          {
 222   3            zheng_len++;
 223   3            zheng/=10;
 224   3          }
 225   2        }
 226   1        else{
 227   2          zheng_len=1;
 228   2        }
 229   1        xiao_len=2;
 230   1        zheng=(int)num; //Âú®ËÆ°ÁÆóÊï¥Êï∞ÈÉ®ÂàÜÊï∞ÂÄºÊó∂ÔºåÂéüËµãÂÄºË¢´ÁØ°ÊîπÔºåËøôÈáåÈáçÊñ∞ËµãÂÄº
 231   1        if(polarity_flag)
 232   1        { 
 233   2          if(Char_Size==16)
 234   2          {
 235   3            OLED_ShowNum(x,y,zheng,zheng_len,Char_Size);
C51 COMPILER V9.01   OLED_IIC                                                              05/12/2021 16:57:03 PAGE 5   

 236   3            OLED_ShowChar(x+zheng_len*8,y,'.',Char_Size);
 237   3            OLED_ShowNum(x+(zheng_len+1)*8,y,xiao,xiao_len,Char_Size);
 238   3          }
 239   2          else
 240   2          {
 241   3            OLED_ShowNum(x,y,zheng,zheng_len,Char_Size);
 242   3            OLED_ShowChar(x+zheng_len*6,y,'.',Char_Size);
 243   3            OLED_ShowNum(x+(zheng_len+1)*6,y,xiao,xiao_len,Char_Size);
 244   3          }
 245   2        }
 246   1        else
 247   1        {
 248   2          OLED_ShowChar(x,y,'-',Char_Size);
 249   2          if(Char_Size==16)
 250   2          {
 251   3            OLED_ShowNum(x+8,y,zheng,zheng_len,Char_Size);
 252   3            OLED_ShowChar(x+(zheng_len+1)*8,y,'.',Char_Size);
 253   3            OLED_ShowNum(x+(zheng_len+2)*8,y,xiao,xiao_len,Char_Size);
 254   3          }
 255   2          else
 256   2          {
 257   3            OLED_ShowNum(x+6,y,zheng,zheng_len,Char_Size);
 258   3            OLED_ShowChar(x+(zheng_len+1)*6,y,'.',Char_Size);
 259   3            OLED_ShowNum(x+(zheng_len+2)*6,y,xiao,xiao_len,Char_Size);
 260   3          }
 261   2        }
 262   1      }
 263          
 264          
 265          void OLED_ShowString(unsigned char x,unsigned char y,unsigned char *chr,unsigned char  Char_Size)
 266          {
 267   1        unsigned char j=0; //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
 268   1        while (chr[j]!='\0') //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ“ªÔøΩÔøΩÔøΩ÷∑ÔøΩ
 269   1        {   
 270   2          OLED_ShowChar(x,y,chr[j],Char_Size); //ÔøΩÔøΩ æÔøΩ÷∑ÔøΩ
 271   2            x+=8; //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ8 ÔøΩÔøΩ“ªÔøΩÔøΩÔøΩ÷∑ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ’º8
 272   2          if(x>128){x=0;y+=2;} //ÔøΩÔøΩÔøΩxÔøΩÔøΩÔøΩÔøΩ128ÔøΩÔøΩÔøΩ–ªÔøΩ“≥ÔøΩÔøΩÔøΩ”∏ÔøΩ“≥ÔøΩƒµÔøΩ“ªÔøΩÔøΩÔøΩÔøΩ æ
 273   2            j++; //ÔøΩÔøΩ“ªÔøΩÔøΩÔøΩ÷∑ÔøΩ
 274   2        }
 275   1      }
 276          void OLED_RevShowCHinese(unsigned char x,unsigned char y,unsigned char no)
 277          {
 278   1        unsigned char t,adder=0; 
 279   1        OLED_Set_Pos(x,y);  
 280   1          for(t=0;t<16;t++) 
 281   1          {
 282   2              OLED_WR_Byte(~Hzk[2*no][t],OLED_DATA);
 283   2              adder+=1; 
 284   2           }  
 285   1        OLED_Set_Pos(x,y+1); 
 286   1          for(t=0;t<16;t++)
 287   1            { 
 288   2              OLED_WR_Byte(~Hzk[2*no+1][t],OLED_DATA);
 289   2              adder+=1;
 290   2        }
 291   1      }
 292          void OLED_ShowCHinese(unsigned char x,unsigned char y,unsigned char no)
 293          {               
 294   1        unsigned char t,adder=0; 
 295   1        OLED_Set_Pos(x,y);  
 296   1          for(t=0;t<16;t++) 
 297   1          {
C51 COMPILER V9.01   OLED_IIC                                                              05/12/2021 16:57:03 PAGE 6   

 298   2            OLED_WR_Byte(Hzk[2*no][t],OLED_DATA);
 299   2            adder+=1; 
 300   2        } 
 301   1        OLED_Set_Pos(x,y+1); 
 302   1          for(t=0;t<16;t++)
 303   1            { 
 304   2            OLED_WR_Byte(Hzk[2*no+1][t],OLED_DATA);
 305   2            adder+=1;
 306   2        }
 307   1      }
 308          
 309          void OLED_Showdecimal(unsigned char x,unsigned char y,float num,unsigned char len,unsigned char size2)
 310          {           
 311   1        unsigned char t,temp,len1,temp1;
 312   1        float temp2;
 313   1        unsigned char enshow=0;
 314   1          if(num < 0)
 315   1        {
 316   2          OLED_ShowChar(x,y,'0'- 3,size2);
 317   2          num =fabs(num);
 318   2        }
 319   1          else
 320   1        OLED_ShowChar(x,y,' ',size2);//
 321   1        temp1 = (int)temp;
 322   1        temp2 = num - temp1;
 323   1        len1 = len - 6;
 324   1        OLED_ShowChar(x + size2/2*4,y,'0'- 2,size2);
 325   1        x = x + size2/2;
 326   1        for(t=0;t<len1;t++)
 327   1        {
 328   2          temp=(int)((num/oled_pow(10,len1-t-1)))%10;
 329   2          if(enshow==0&&t<(len1-1))
 330   2          {
 331   3            if(temp==0)
 332   3            {
 333   4              OLED_ShowChar(x+(size2/2)*t,y,' ',size2);
 334   4              continue;
 335   4            }else enshow=1; 
 336   3             
 337   3          }
 338   2          OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
 339   2        }
 340   1        OLED_ShowChar(x+(size2/2)*4,y,((int)(temp2*10)%10) + '0',size2);
 341   1        OLED_ShowChar(x+(size2/2)*5,y,((int)(temp2*100)%10) + '0',size2); 
 342   1        OLED_ShowChar(x+(size2/2)*6,y,((int)(temp2*1000)%10) + '0',size2); 
 343   1        OLED_ShowChar(x+(size2/2)*7,y,((int)(temp2*10000)%10) + '0',size2); 
 344   1      }
 345          void OLED_Show_Decimal(unsigned char x,unsigned char y,float num,unsigned char z_len,unsigned char f_len,u
             -nsigned char size2)
 346          {           
 347   1        unsigned char t,temp;
 348   1        unsigned char enshow;
 349   1        int z_temp,f_temp;      
 350   1        z_temp=(int)num;
 351   1        //Êï¥Êï∞ÈÉ®ÂàÜ
 352   1        for(t=0;t<z_len;t++)
 353   1        {
 354   2          temp=(z_temp/oled_pow(10,z_len-t-1))%10;
 355   2          if(enshow==0 && t<(z_len-1))
 356   2          {
 357   3            if(temp==0)
 358   3            {
C51 COMPILER V9.01   OLED_IIC                                                              05/12/2021 16:57:03 PAGE 7   

 359   4              OLED_ShowChar(x+(size2/2)*t,y,' ',size2);
 360   4              continue;
 361   4            }
 362   3            else
 363   3            enshow=1;
 364   3          }
 365   2          OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
 366   2        }
 367   1        //Â∞èÊï∞ÁÇπ
 368   1        OLED_ShowChar(x+(size2/2)*(z_len),y,'.',size2); 
 369   1        
 370   1        f_temp=(int)((num-z_temp)*(oled_pow(10,f_len)));
 371   1        //Â∞èÊï∞ÈÉ®ÂàÜ
 372   1        for(t=0;t<f_len;t++)
 373   1        {
 374   2          temp=(f_temp/oled_pow(10,f_len-t-1))%10;
 375   2          OLED_ShowChar(x+(size2/2)*(t+z_len)+5,y,temp+'0',size2); 
 376   2        }
 377   1      }
 378          
 379          void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[
             -])
 380          {   
 381   1       unsigned int j=0; //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
 382   1       unsigned char x,y; //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
 383   1        
 384   1        if(y1%8==0) y=y1/8;   //ÔøΩ–∂ÔøΩÔøΩÔøΩ÷π“≥ÔøΩ«∑ÔøΩŒ™8ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
 385   1        else y=y1/8+1;
 386   1        for(y=y0;y<y1;y++) //ÔøΩÔøΩÔøΩÔøΩ º“≥ÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ÷π“≥
 387   1        {
 388   2          OLED_Set_Pos(x0,y); //ÔøΩÔøΩ“≥ÔøΩÔøΩÔøΩÔøΩ ºÔøΩ–øÔøΩ ºÔøΩÔøΩ
 389   2          for(x=x0;x<x1;x++) //ÔøΩÔøΩx1 - x0 ÔøΩÔøΩ
 390   2            {
 391   3              OLED_WR_Byte(BMP[j++],OLED_DATA); //ÔøΩÔøΩÕº∆¨ÔøΩƒµÔøΩ      
 392   3            }
 393   2        }
 394   1      } 
 395          
 396          
 397          void OLED_Init(void)
 398          {
 399   1        char i;
 400   1        for(i = 0; i < 100; i++)
 401   1        {
 402   2          _Nop();
 403   2        }
 404   1        OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 405   1        OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 406   1        OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 407   1        OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 408   1        OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 409   1        OLED_WR_Byte(0x81,OLED_CMD); // contract control
 410   1        OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 411   1        OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 412   1        OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 413   1        OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 414   1        OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 415   1        OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 416   1        OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 417   1        OLED_WR_Byte(0x00,OLED_CMD);//
 418   1        
 419   1        OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
C51 COMPILER V9.01   OLED_IIC                                                              05/12/2021 16:57:03 PAGE 8   

 420   1        OLED_WR_Byte(0x80,OLED_CMD);//
 421   1        
 422   1        OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 423   1        OLED_WR_Byte(0x05,OLED_CMD);//
 424   1        
 425   1        OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 426   1        OLED_WR_Byte(0xF1,OLED_CMD);//
 427   1        
 428   1        OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 429   1        OLED_WR_Byte(0x12,OLED_CMD);//
 430   1        
 431   1        OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 432   1        OLED_WR_Byte(0x30,OLED_CMD);//
 433   1        
 434   1        OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 435   1        OLED_WR_Byte(0x14,OLED_CMD);//
 436   1        
 437   1        OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 438   1        OLED_Clear();        //ÔøΩÔøΩÔøΩÔøΩ
 439   1        OLED_Set_Pos(0,0);   //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–¥ÔøΩÔøΩÔøΩÔøΩÔøΩ ºÔøΩ–°ÔøΩÔøΩÔøΩ
 440   1      }  
 441          //
 442          
 443          
 444          void OLED_Scroll(unsigned char x, unsigned char y)
 445          {
 446   1        OLED_WR_Byte(0x2E,OLED_CMD);  //ÔøΩÿ±’πÔøΩÔøΩÔøΩ
 447   1        OLED_WR_Byte(0x27,OLED_CMD);  //ÀÆ∆ΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
 448   1        OLED_WR_Byte(0x00,OLED_CMD);  //ÔøΩÔøΩÔøΩÔøΩÔøΩ÷ΩÔøΩ
 449   1        OLED_WR_Byte(x,OLED_CMD); //ÔøΩÔøΩ º“≥ 0
 450   1        OLED_WR_Byte(0x00,OLED_CMD);  //ÔøΩÔøΩÔøΩÔøΩ ±ÔøΩÔøΩÔøΩÔøΩ
 451   1        OLED_WR_Byte(y,OLED_CMD); //ÔøΩÔøΩ÷π“≥ 1
 452   1        OLED_WR_Byte(0x00,OLED_CMD);  //ÔøΩÔøΩÔøΩÔøΩÔøΩ÷ΩÔøΩ
 453   1        OLED_WR_Byte(0xFF,OLED_CMD);  //ÔøΩÔøΩÔøΩÔøΩÔøΩ÷ΩÔøΩ
 454   1        OLED_WR_Byte(0x2F,OLED_CMD);  //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
 455   1      }
 456          
 457          void OLED_CloseScroll()
 458          {
 459   1        OLED_WR_Byte(0x2E,OLED_CMD);  //ÔøΩÿ±’πÔøΩÔøΩÔøΩ
 460   1      }
 461          
 462          void OLED_Upmove()
 463          {
 464   1        OLED_WR_Byte(0x2e,OLED_CMD);        //ÔøΩÿ±’πÔøΩÔøΩÔøΩ
 465   1        OLED_WR_Byte(0x29,OLED_CMD);        //ÀÆ∆ΩÔøΩÔøΩ÷±ÔøΩÔøΩÀÆ∆ΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
             - 2a/29
 466   1        OLED_WR_Byte(0x00,OLED_CMD);        //ÔøΩÔøΩÔøΩÔøΩÔøΩ÷ΩÔøΩ
 467   1        OLED_WR_Byte(0x00,OLED_CMD);        //ÔøΩÔøΩ º“≥0
 468   1        OLED_WR_Byte(0x07,OLED_CMD);        //ÔøΩÔøΩÔøΩÔøΩ ±ÔøΩÔøΩÔøΩÔøΩ
 469   1        OLED_WR_Byte(0x07,OLED_CMD);        //ÔøΩÔøΩ÷π“≥
 470   1        OLED_WR_Byte(0x01,OLED_CMD);        //∆´ÔøΩÔøΩÔøΩÔøΩ
 471   1        OLED_WR_Byte(0x2F,OLED_CMD);        //ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ
 472   1      }
 473          
 474          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3454    ----
   CONSTANT SIZE    =   4184    ----
   XDATA SIZE       =   2304      92
C51 COMPILER V9.01   OLED_IIC                                                              05/12/2021 16:57:03 PAGE 9   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
